//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgs/phy_msgs/plme.msg.
//

#ifndef __PLME_M_H
#define __PLME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class PLMECCARequest;
class PLMECCAConfirm;
class PLMEGetRequest;
class PLMEGetConfirm;
class PLMESetRequest;
class PLMESetConfirm;
class PLMESetTrxStateRequest;
class PLMESetTrxStateConfirm;
class PLMESwitchRequest;
class PLMESwitchConfirm;
/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:16</tt> by opp_msgtool.
 * <pre>
 * message PLMECCARequest
 * {
 * }
 * </pre>
 */
class PLMECCARequest : public ::omnetpp::cMessage
{
  protected:

  private:
    void copy(const PLMECCARequest& other);

  protected:
    bool operator==(const PLMECCARequest&) = delete;

  public:
    PLMECCARequest(const char *name=nullptr, short kind=0);
    PLMECCARequest(const PLMECCARequest& other);
    virtual ~PLMECCARequest();
    PLMECCARequest& operator=(const PLMECCARequest& other);
    virtual PLMECCARequest *dup() const override {return new PLMECCARequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMECCARequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMECCARequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:20</tt> by opp_msgtool.
 * <pre>
 * message PLMECCAConfirm
 * {
 *     uint8_t status;
 * }
 * </pre>
 */
class PLMECCAConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t status = 0;

  private:
    void copy(const PLMECCAConfirm& other);

  protected:
    bool operator==(const PLMECCAConfirm&) = delete;

  public:
    PLMECCAConfirm(const char *name=nullptr, short kind=0);
    PLMECCAConfirm(const PLMECCAConfirm& other);
    virtual ~PLMECCAConfirm();
    PLMECCAConfirm& operator=(const PLMECCAConfirm& other);
    virtual PLMECCAConfirm *dup() const override {return new PLMECCAConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMECCAConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMECCAConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:26</tt> by opp_msgtool.
 * <pre>
 * message PLMEGetRequest
 * {
 *     uint8_t PIBAttribute;
 * }
 * </pre>
 */
class PLMEGetRequest : public ::omnetpp::cMessage
{
  protected:
    uint8_t PIBAttribute = 0;

  private:
    void copy(const PLMEGetRequest& other);

  protected:
    bool operator==(const PLMEGetRequest&) = delete;

  public:
    PLMEGetRequest(const char *name=nullptr, short kind=0);
    PLMEGetRequest(const PLMEGetRequest& other);
    virtual ~PLMEGetRequest();
    PLMEGetRequest& operator=(const PLMEGetRequest& other);
    virtual PLMEGetRequest *dup() const override {return new PLMEGetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getPIBAttribute() const;
    virtual void setPIBAttribute(uint8_t PIBAttribute);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMEGetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMEGetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:30</tt> by opp_msgtool.
 * <pre>
 * message PLMEGetConfirm
 * {
 *     uint8_t status;
 *     uint8_t PIBAttribute;
 *     int PIBAttributeValue[];
 * }
 * </pre>
 */
class PLMEGetConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t status = 0;
    uint8_t PIBAttribute = 0;
    int *PIBAttributeValue = nullptr;
    size_t PIBAttributeValue_arraysize = 0;

  private:
    void copy(const PLMEGetConfirm& other);

  protected:
    bool operator==(const PLMEGetConfirm&) = delete;

  public:
    PLMEGetConfirm(const char *name=nullptr, short kind=0);
    PLMEGetConfirm(const PLMEGetConfirm& other);
    virtual ~PLMEGetConfirm();
    PLMEGetConfirm& operator=(const PLMEGetConfirm& other);
    virtual PLMEGetConfirm *dup() const override {return new PLMEGetConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);

    virtual uint8_t getPIBAttribute() const;
    virtual void setPIBAttribute(uint8_t PIBAttribute);

    virtual void setPIBAttributeValueArraySize(size_t size);
    virtual size_t getPIBAttributeValueArraySize() const;
    virtual int getPIBAttributeValue(size_t k) const;
    virtual void setPIBAttributeValue(size_t k, int PIBAttributeValue);
    virtual void insertPIBAttributeValue(size_t k, int PIBAttributeValue);
    [[deprecated]] void insertPIBAttributeValue(int PIBAttributeValue) {appendPIBAttributeValue(PIBAttributeValue);}
    virtual void appendPIBAttributeValue(int PIBAttributeValue);
    virtual void erasePIBAttributeValue(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMEGetConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMEGetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:37</tt> by opp_msgtool.
 * <pre>
 * message PLMESetRequest
 * {
 *     uint8_t PIBAttribute;
 *     int PIBAttributeValue[];
 * }
 * </pre>
 */
class PLMESetRequest : public ::omnetpp::cMessage
{
  protected:
    uint8_t PIBAttribute = 0;
    int *PIBAttributeValue = nullptr;
    size_t PIBAttributeValue_arraysize = 0;

  private:
    void copy(const PLMESetRequest& other);

  protected:
    bool operator==(const PLMESetRequest&) = delete;

  public:
    PLMESetRequest(const char *name=nullptr, short kind=0);
    PLMESetRequest(const PLMESetRequest& other);
    virtual ~PLMESetRequest();
    PLMESetRequest& operator=(const PLMESetRequest& other);
    virtual PLMESetRequest *dup() const override {return new PLMESetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getPIBAttribute() const;
    virtual void setPIBAttribute(uint8_t PIBAttribute);

    virtual void setPIBAttributeValueArraySize(size_t size);
    virtual size_t getPIBAttributeValueArraySize() const;
    virtual int getPIBAttributeValue(size_t k) const;
    virtual void setPIBAttributeValue(size_t k, int PIBAttributeValue);
    virtual void insertPIBAttributeValue(size_t k, int PIBAttributeValue);
    [[deprecated]] void insertPIBAttributeValue(int PIBAttributeValue) {appendPIBAttributeValue(PIBAttributeValue);}
    virtual void appendPIBAttributeValue(int PIBAttributeValue);
    virtual void erasePIBAttributeValue(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:42</tt> by opp_msgtool.
 * <pre>
 * message PLMESetConfirm
 * {
 *     uint8_t status;
 *     uint8_t PIBAttribute;
 * }
 * </pre>
 */
class PLMESetConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t status = 0;
    uint8_t PIBAttribute = 0;

  private:
    void copy(const PLMESetConfirm& other);

  protected:
    bool operator==(const PLMESetConfirm&) = delete;

  public:
    PLMESetConfirm(const char *name=nullptr, short kind=0);
    PLMESetConfirm(const PLMESetConfirm& other);
    virtual ~PLMESetConfirm();
    PLMESetConfirm& operator=(const PLMESetConfirm& other);
    virtual PLMESetConfirm *dup() const override {return new PLMESetConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);

    virtual uint8_t getPIBAttribute() const;
    virtual void setPIBAttribute(uint8_t PIBAttribute);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESetConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:49</tt> by opp_msgtool.
 * <pre>
 * message PLMESetTrxStateRequest
 * {
 *     uint8_t state;
 * }
 * </pre>
 */
class PLMESetTrxStateRequest : public ::omnetpp::cMessage
{
  protected:
    uint8_t state = 0;

  private:
    void copy(const PLMESetTrxStateRequest& other);

  protected:
    bool operator==(const PLMESetTrxStateRequest&) = delete;

  public:
    PLMESetTrxStateRequest(const char *name=nullptr, short kind=0);
    PLMESetTrxStateRequest(const PLMESetTrxStateRequest& other);
    virtual ~PLMESetTrxStateRequest();
    PLMESetTrxStateRequest& operator=(const PLMESetTrxStateRequest& other);
    virtual PLMESetTrxStateRequest *dup() const override {return new PLMESetTrxStateRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getState() const;
    virtual void setState(uint8_t state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESetTrxStateRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESetTrxStateRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:53</tt> by opp_msgtool.
 * <pre>
 * message PLMESetTrxStateConfirm
 * {
 *     uint8_t status;
 * }
 * </pre>
 */
class PLMESetTrxStateConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t status = 0;

  private:
    void copy(const PLMESetTrxStateConfirm& other);

  protected:
    bool operator==(const PLMESetTrxStateConfirm&) = delete;

  public:
    PLMESetTrxStateConfirm(const char *name=nullptr, short kind=0);
    PLMESetTrxStateConfirm(const PLMESetTrxStateConfirm& other);
    virtual ~PLMESetTrxStateConfirm();
    PLMESetTrxStateConfirm& operator=(const PLMESetTrxStateConfirm& other);
    virtual PLMESetTrxStateConfirm *dup() const override {return new PLMESetTrxStateConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESetTrxStateConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESetTrxStateConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:58</tt> by opp_msgtool.
 * <pre>
 * message PLMESwitchRequest
 * {
 *     bool SWBitMap;
 *     bool dir;
 * }
 * </pre>
 */
class PLMESwitchRequest : public ::omnetpp::cMessage
{
  protected:
    bool SWBitMap = false;
    bool dir = false;

  private:
    void copy(const PLMESwitchRequest& other);

  protected:
    bool operator==(const PLMESwitchRequest&) = delete;

  public:
    PLMESwitchRequest(const char *name=nullptr, short kind=0);
    PLMESwitchRequest(const PLMESwitchRequest& other);
    virtual ~PLMESwitchRequest();
    PLMESwitchRequest& operator=(const PLMESwitchRequest& other);
    virtual PLMESwitchRequest *dup() const override {return new PLMESwitchRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSWBitMap() const;
    virtual void setSWBitMap(bool SWBitMap);

    virtual bool getDir() const;
    virtual void setDir(bool dir);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESwitchRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESwitchRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/phy_msgs/plme.msg:63</tt> by opp_msgtool.
 * <pre>
 * message PLMESwitchConfirm
 * {
 *     uint8_t status;
 * }
 * </pre>
 */
class PLMESwitchConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t status = 0;

  private:
    void copy(const PLMESwitchConfirm& other);

  protected:
    bool operator==(const PLMESwitchConfirm&) = delete;

  public:
    PLMESwitchConfirm(const char *name=nullptr, short kind=0);
    PLMESwitchConfirm(const PLMESwitchConfirm& other);
    virtual ~PLMESwitchConfirm();
    PLMESwitchConfirm& operator=(const PLMESwitchConfirm& other);
    virtual PLMESwitchConfirm *dup() const override {return new PLMESwitchConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PLMESwitchConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PLMESwitchConfirm& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline PLMECCARequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMECCARequest*>(ptr.get<cObject>()); }
template<> inline PLMECCAConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMECCAConfirm*>(ptr.get<cObject>()); }
template<> inline PLMEGetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMEGetRequest*>(ptr.get<cObject>()); }
template<> inline PLMEGetConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMEGetConfirm*>(ptr.get<cObject>()); }
template<> inline PLMESetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESetRequest*>(ptr.get<cObject>()); }
template<> inline PLMESetConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESetConfirm*>(ptr.get<cObject>()); }
template<> inline PLMESetTrxStateRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESetTrxStateRequest*>(ptr.get<cObject>()); }
template<> inline PLMESetTrxStateConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESetTrxStateConfirm*>(ptr.get<cObject>()); }
template<> inline PLMESwitchRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESwitchRequest*>(ptr.get<cObject>()); }
template<> inline PLMESwitchConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<PLMESwitchConfirm*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PLME_M_H

