//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgs/mac_frame.msg.
//

#ifndef __MAC_FRAME_M_H
#define __MAC_FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MacFrame;
struct GTSList_t;
class MacBeaconFrame;
class MacDataFrame;
class MacAckFrame;
class MacCommandFrame;
#include "types_m.h" // import types

/**
 * Class generated from <tt>msgs/mac_frame.msg:18</tt> by opp_msgtool.
 * <pre>
 * packet MacFrame
 * {
 *     // Frame control
 *     uint8_t frameVersion = 1;	// IEEE 802.15.7 - 2018 compatible
 *     frameType_t frameType;
 *     bool securityEnable = 0;
 *     bool framePending;
 *     bool acknoledgementRequest;
 *     addressingMode_t destinationAddressingMode;
 *     addressingMode_t sourceAddressingMode;
 * 
 *     uint8_t sequenceNumber;
 * 
 *     // Addressing fields. Some of these are not mandatory, depending on the
 *     // addressing modes and frame type.
 *     uint16_t destinationOWPANIdentifier;
 *     uint64_t destinationAddress;
 *     uint16_t sourceOWPANIdentifier;
 *     uint64_t sourceAddress;
 * 
 *     // There'll never be a security header, by design.
 * 
 *     // Forward Error correction (FCS = Forward error correction)
 *     uint16_t FCS;
 * }
 * </pre>
 */
class MacFrame : public ::omnetpp::cPacket
{
  protected:
    uint8_t frameVersion = 1;
    frameType_t frameType = static_cast<frameType_t>(-1);
    bool securityEnable = 0;
    bool framePending = false;
    bool acknoledgementRequest = false;
    addressingMode_t destinationAddressingMode = static_cast<addressingMode_t>(-1);
    addressingMode_t sourceAddressingMode = static_cast<addressingMode_t>(-1);
    uint8_t sequenceNumber = 0;
    uint16_t destinationOWPANIdentifier = 0;
    uint64_t destinationAddress = 0;
    uint16_t sourceOWPANIdentifier = 0;
    uint64_t sourceAddress = 0;
    uint16_t FCS = 0;

  private:
    void copy(const MacFrame& other);

  protected:
    bool operator==(const MacFrame&) = delete;

  public:
    MacFrame(const char *name=nullptr, short kind=0);
    MacFrame(const MacFrame& other);
    virtual ~MacFrame();
    MacFrame& operator=(const MacFrame& other);
    virtual MacFrame *dup() const override {return new MacFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getFrameVersion() const;
    virtual void setFrameVersion(uint8_t frameVersion);

    virtual frameType_t getFrameType() const;
    virtual void setFrameType(frameType_t frameType);

    virtual bool getSecurityEnable() const;
    virtual void setSecurityEnable(bool securityEnable);

    virtual bool getFramePending() const;
    virtual void setFramePending(bool framePending);

    virtual bool getAcknoledgementRequest() const;
    virtual void setAcknoledgementRequest(bool acknoledgementRequest);

    virtual addressingMode_t getDestinationAddressingMode() const;
    virtual void setDestinationAddressingMode(addressingMode_t destinationAddressingMode);

    virtual addressingMode_t getSourceAddressingMode() const;
    virtual void setSourceAddressingMode(addressingMode_t sourceAddressingMode);

    virtual uint8_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint8_t sequenceNumber);

    virtual uint16_t getDestinationOWPANIdentifier() const;
    virtual void setDestinationOWPANIdentifier(uint16_t destinationOWPANIdentifier);

    virtual uint64_t getDestinationAddress() const;
    virtual void setDestinationAddress(uint64_t destinationAddress);

    virtual uint16_t getSourceOWPANIdentifier() const;
    virtual void setSourceOWPANIdentifier(uint16_t sourceOWPANIdentifier);

    virtual uint64_t getSourceAddress() const;
    virtual void setSourceAddress(uint64_t sourceAddress);

    virtual uint16_t getFCS() const;
    virtual void setFCS(uint16_t FCS);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacFrame& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from msgs/mac_frame.msg:43 by opp_msgtool.
 */
struct GTSList_t
{
    GTSList_t();
    uint16_t deviceShortAddress = 0;
    uint8_t GTSStartingSlot = 0;
    uint8_t GTSLength = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const GTSList_t& a);
void __doUnpacking(omnetpp::cCommBuffer *b, GTSList_t& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GTSList_t& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GTSList_t& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>msgs/mac_frame.msg:49</tt> by opp_msgtool.
 * <pre>
 * packet MacBeaconFrame extends MacFrame
 * {
 *     // Superframe specification field
 *     uint8_t beaconOrder;		// -> macBeaconOrder
 *     uint8_t superframeOrder;	// -> macSuperframeOrder
 *     uint8_t finalCAPSlot;		// How many slots are used for CAP from the aNumSuperframeSlots (16).
 *     bool OWPANCoordinator;		// "true" if being transmitted by the coordinator
 *     bool associationPermit;		// Related to macAssociationPermit
 *     bool cellSearchEn;
 * 
 *     // GTS fields
 *     // GTSSpecification
 *     uint8_t GTSDescriptorCount;
 *     bool GTSPermit;
 *     uint8_t GTSDirections;
 *     GTSList_t GTSList[];
 * 
 *     // Pending address fields
 *     // Pending address specification
 *     uint8_t numberOfShortAddressesPending;
 *     uint8_t numberOfExtendedAddressesPending;
 *     uint64_t addressList[];
 * 
 *     uint8_t beaconPayload[];	// Related to macBeaconPayload
 * 
 * }
 * </pre>
 */
class MacBeaconFrame : public ::MacFrame
{
  protected:
    uint8_t beaconOrder = 0;
    uint8_t superframeOrder = 0;
    uint8_t finalCAPSlot = 0;
    bool OWPANCoordinator = false;
    bool associationPermit = false;
    bool cellSearchEn = false;
    uint8_t GTSDescriptorCount = 0;
    bool GTSPermit = false;
    uint8_t GTSDirections = 0;
    GTSList_t *GTSList = nullptr;
    size_t GTSList_arraysize = 0;
    uint8_t numberOfShortAddressesPending = 0;
    uint8_t numberOfExtendedAddressesPending = 0;
    uint64_t *addressList = nullptr;
    size_t addressList_arraysize = 0;
    uint8_t *beaconPayload = nullptr;
    size_t beaconPayload_arraysize = 0;

  private:
    void copy(const MacBeaconFrame& other);

  protected:
    bool operator==(const MacBeaconFrame&) = delete;

  public:
    MacBeaconFrame(const char *name=nullptr, short kind=0);
    MacBeaconFrame(const MacBeaconFrame& other);
    virtual ~MacBeaconFrame();
    MacBeaconFrame& operator=(const MacBeaconFrame& other);
    virtual MacBeaconFrame *dup() const override {return new MacBeaconFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getBeaconOrder() const;
    virtual void setBeaconOrder(uint8_t beaconOrder);

    virtual uint8_t getSuperframeOrder() const;
    virtual void setSuperframeOrder(uint8_t superframeOrder);

    virtual uint8_t getFinalCAPSlot() const;
    virtual void setFinalCAPSlot(uint8_t finalCAPSlot);

    virtual bool getOWPANCoordinator() const;
    virtual void setOWPANCoordinator(bool OWPANCoordinator);

    virtual bool getAssociationPermit() const;
    virtual void setAssociationPermit(bool associationPermit);

    virtual bool getCellSearchEn() const;
    virtual void setCellSearchEn(bool cellSearchEn);

    virtual uint8_t getGTSDescriptorCount() const;
    virtual void setGTSDescriptorCount(uint8_t GTSDescriptorCount);

    virtual bool getGTSPermit() const;
    virtual void setGTSPermit(bool GTSPermit);

    virtual uint8_t getGTSDirections() const;
    virtual void setGTSDirections(uint8_t GTSDirections);

    virtual void setGTSListArraySize(size_t size);
    virtual size_t getGTSListArraySize() const;
    virtual const GTSList_t& getGTSList(size_t k) const;
    virtual GTSList_t& getGTSListForUpdate(size_t k) { return const_cast<GTSList_t&>(const_cast<MacBeaconFrame*>(this)->getGTSList(k));}
    virtual void setGTSList(size_t k, const GTSList_t& GTSList);
    virtual void insertGTSList(size_t k, const GTSList_t& GTSList);
    [[deprecated]] void insertGTSList(const GTSList_t& GTSList) {appendGTSList(GTSList);}
    virtual void appendGTSList(const GTSList_t& GTSList);
    virtual void eraseGTSList(size_t k);

    virtual uint8_t getNumberOfShortAddressesPending() const;
    virtual void setNumberOfShortAddressesPending(uint8_t numberOfShortAddressesPending);

    virtual uint8_t getNumberOfExtendedAddressesPending() const;
    virtual void setNumberOfExtendedAddressesPending(uint8_t numberOfExtendedAddressesPending);

    virtual void setAddressListArraySize(size_t size);
    virtual size_t getAddressListArraySize() const;
    virtual uint64_t getAddressList(size_t k) const;
    virtual void setAddressList(size_t k, uint64_t addressList);
    virtual void insertAddressList(size_t k, uint64_t addressList);
    [[deprecated]] void insertAddressList(uint64_t addressList) {appendAddressList(addressList);}
    virtual void appendAddressList(uint64_t addressList);
    virtual void eraseAddressList(size_t k);

    virtual void setBeaconPayloadArraySize(size_t size);
    virtual size_t getBeaconPayloadArraySize() const;
    virtual uint8_t getBeaconPayload(size_t k) const;
    virtual void setBeaconPayload(size_t k, uint8_t beaconPayload);
    virtual void insertBeaconPayload(size_t k, uint8_t beaconPayload);
    [[deprecated]] void insertBeaconPayload(uint8_t beaconPayload) {appendBeaconPayload(beaconPayload);}
    virtual void appendBeaconPayload(uint8_t beaconPayload);
    virtual void eraseBeaconPayload(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacBeaconFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacBeaconFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mac_frame.msg:76</tt> by opp_msgtool.
 * <pre>
 * packet MacDataFrame extends MacFrame
 * {
 *     // MSDU field
 *     dataType_t msduType;
 *     uint8_t numberOfPPDUs;
 *     uint8_t dataPayload[];
 * }
 * </pre>
 */
class MacDataFrame : public ::MacFrame
{
  protected:
    dataType_t msduType = static_cast<dataType_t>(-1);
    uint8_t numberOfPPDUs = 0;
    uint8_t *dataPayload = nullptr;
    size_t dataPayload_arraysize = 0;

  private:
    void copy(const MacDataFrame& other);

  protected:
    bool operator==(const MacDataFrame&) = delete;

  public:
    MacDataFrame(const char *name=nullptr, short kind=0);
    MacDataFrame(const MacDataFrame& other);
    virtual ~MacDataFrame();
    MacDataFrame& operator=(const MacDataFrame& other);
    virtual MacDataFrame *dup() const override {return new MacDataFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual dataType_t getMsduType() const;
    virtual void setMsduType(dataType_t msduType);

    virtual uint8_t getNumberOfPPDUs() const;
    virtual void setNumberOfPPDUs(uint8_t numberOfPPDUs);

    virtual void setDataPayloadArraySize(size_t size);
    virtual size_t getDataPayloadArraySize() const;
    virtual uint8_t getDataPayload(size_t k) const;
    virtual void setDataPayload(size_t k, uint8_t dataPayload);
    virtual void insertDataPayload(size_t k, uint8_t dataPayload);
    [[deprecated]] void insertDataPayload(uint8_t dataPayload) {appendDataPayload(dataPayload);}
    virtual void appendDataPayload(uint8_t dataPayload);
    virtual void eraseDataPayload(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacDataFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacDataFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mac_frame.msg:83</tt> by opp_msgtool.
 * <pre>
 * packet MacAckFrame extends MacFrame
 * {
 *     uint16_t bufferSize;
 *     uint8_t frameCount;
 *     uint16_t sequenceControl;
 *     uint16_t frameBitmap;
 * }
 * </pre>
 */
class MacAckFrame : public ::MacFrame
{
  protected:
    uint16_t bufferSize = 0;
    uint8_t frameCount = 0;
    uint16_t sequenceControl = 0;
    uint16_t frameBitmap = 0;

  private:
    void copy(const MacAckFrame& other);

  protected:
    bool operator==(const MacAckFrame&) = delete;

  public:
    MacAckFrame(const char *name=nullptr, short kind=0);
    MacAckFrame(const MacAckFrame& other);
    virtual ~MacAckFrame();
    MacAckFrame& operator=(const MacAckFrame& other);
    virtual MacAckFrame *dup() const override {return new MacAckFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getBufferSize() const;
    virtual void setBufferSize(uint16_t bufferSize);

    virtual uint8_t getFrameCount() const;
    virtual void setFrameCount(uint8_t frameCount);

    virtual uint16_t getSequenceControl() const;
    virtual void setSequenceControl(uint16_t sequenceControl);

    virtual uint16_t getFrameBitmap() const;
    virtual void setFrameBitmap(uint16_t frameBitmap);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacAckFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacAckFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mac_frame.msg:90</tt> by opp_msgtool.
 * <pre>
 * packet MacCommandFrame extends MacFrame
 * {
 *     commandFrameIdentifier_t commandFrameIdentifier;
 *     uint8_t commandPayload[];
 * }
 * </pre>
 */
class MacCommandFrame : public ::MacFrame
{
  protected:
    commandFrameIdentifier_t commandFrameIdentifier = static_cast<commandFrameIdentifier_t>(-1);
    uint8_t *commandPayload = nullptr;
    size_t commandPayload_arraysize = 0;

  private:
    void copy(const MacCommandFrame& other);

  protected:
    bool operator==(const MacCommandFrame&) = delete;

  public:
    MacCommandFrame(const char *name=nullptr, short kind=0);
    MacCommandFrame(const MacCommandFrame& other);
    virtual ~MacCommandFrame();
    MacCommandFrame& operator=(const MacCommandFrame& other);
    virtual MacCommandFrame *dup() const override {return new MacCommandFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual commandFrameIdentifier_t getCommandFrameIdentifier() const;
    virtual void setCommandFrameIdentifier(commandFrameIdentifier_t commandFrameIdentifier);

    virtual void setCommandPayloadArraySize(size_t size);
    virtual size_t getCommandPayloadArraySize() const;
    virtual uint8_t getCommandPayload(size_t k) const;
    virtual void setCommandPayload(size_t k, uint8_t commandPayload);
    virtual void insertCommandPayload(size_t k, uint8_t commandPayload);
    [[deprecated]] void insertCommandPayload(uint8_t commandPayload) {appendCommandPayload(commandPayload);}
    virtual void appendCommandPayload(uint8_t commandPayload);
    virtual void eraseCommandPayload(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacCommandFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacCommandFrame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MacFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacFrame*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const GTSList_t *p) {return any_ptr(p);}
template<> inline GTSList_t *fromAnyPtr(any_ptr ptr) { return ptr.get<GTSList_t>(); }
template<> inline MacBeaconFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacBeaconFrame*>(ptr.get<cObject>()); }
template<> inline MacDataFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacDataFrame*>(ptr.get<cObject>()); }
template<> inline MacAckFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacAckFrame*>(ptr.get<cObject>()); }
template<> inline MacCommandFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacCommandFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MAC_FRAME_M_H

