//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgs//types.msg.
//

#ifndef __TYPES_M_H
#define __TYPES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

struct capabilityInformation_t;
struct security_t;
struct OWPANDescritpor_t;
/**
 * Enum generated from <tt>msgs//types.msg:18</tt> by opp_msgtool.
 * <pre>
 * /// \@brief Logical channels are separated according to the optical wavelength.
 * ///     C_XX_YY indicates an optical channel between wavelengths XX and YY.
 * enum opticalChannel_t
 * {
 *     C_190_380 = 0;
 *     C_380_529 = 1;
 *     C_529_598 = 2;
 *     C_598_649 = 3;
 *     C_649_694 = 4;
 *     C_694_737 = 5;
 *     C_737_780 = 6;
 *     C_780_10k = 7;
 * }
 * </pre>
 */
enum opticalChannel_t {
    C_190_380 = 0,
    C_380_529 = 1,
    C_529_598 = 2,
    C_598_649 = 3,
    C_649_694 = 4,
    C_694_737 = 5,
    C_737_780 = 6,
    C_780_10k = 7
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const opticalChannel_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, opticalChannel_t& e) { int n; b->unpack(n); e = static_cast<opticalChannel_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:29</tt> by opp_msgtool.
 * <pre>
 * enum batteryInformation_t
 * {
 *     BAT_UNKNOWN = 0;
 *     BAT_LESS_50 = 1;
 *     BAT_MORE_50 = 2;
 *     BAT_CONNECTED = 3;
 * }
 * </pre>
 */
enum batteryInformation_t {
    BAT_UNKNOWN = 0,
    BAT_LESS_50 = 1,
    BAT_MORE_50 = 2,
    BAT_CONNECTED = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const batteryInformation_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, batteryInformation_t& e) { int n; b->unpack(n); e = static_cast<batteryInformation_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:36</tt> by opp_msgtool.
 * <pre>
 * enum deviceType_t
 * {
 *     DEV_INFRASTRUCTURE = 0;
 *     DEV_MOBILE = 1;
 *     DEV_VEHICLE = 2;
 *     DEV_UNKNOWN = 3;
 * }
 * </pre>
 */
enum deviceType_t {
    DEV_INFRASTRUCTURE = 0,
    DEV_MOBILE = 1,
    DEV_VEHICLE = 2,
    DEV_UNKNOWN = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const deviceType_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, deviceType_t& e) { int n; b->unpack(n); e = static_cast<deviceType_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:43</tt> by opp_msgtool.
 * <pre>
 * enum colorStabilizationScheme_t
 * {
 *     NO_COLOR = 0;
 *     FROM_DEVICE_TO_COORD = 1;
 *     FROM_COORD_TO_DEVICE = 2;
 *     BOTH_WAYS = 3;
 * }
 * </pre>
 */
enum colorStabilizationScheme_t {
    NO_COLOR = 0,
    FROM_DEVICE_TO_COORD = 1,
    FROM_COORD_TO_DEVICE = 2,
    BOTH_WAYS = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const colorStabilizationScheme_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, colorStabilizationScheme_t& e) { int n; b->unpack(n); e = static_cast<colorStabilizationScheme_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:50</tt> by opp_msgtool.
 * <pre>
 * enum maxSupportedOpticalClock_t
 * {
 *     MAX_200K = 0;
 *     MAX_400K = 1;
 *     MAX_3_75M = 2;
 *     MAX_7_5M = 3;
 *     MAX_15M = 4;
 *     MAX_30M = 5;
 *     MAX_60M = 6;
 *     MAX_120M = 7;
 * }
 * </pre>
 */
enum maxSupportedOpticalClock_t {
    MAX_200K = 0,
    MAX_400K = 1,
    MAX_3_75M = 2,
    MAX_7_5M = 3,
    MAX_15M = 4,
    MAX_30M = 5,
    MAX_60M = 6,
    MAX_120M = 7
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const maxSupportedOpticalClock_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, maxSupportedOpticalClock_t& e) { int n; b->unpack(n); e = static_cast<maxSupportedOpticalClock_t>(n); }

/**
 * Struct generated from msgs//types.msg:61 by opp_msgtool.
 */
struct capabilityInformation_t
{
    capabilityInformation_t();
    bool powerSource = false;
    batteryInformation_t batteryInformation = static_cast<batteryInformation_t>(-1);
    bool securityCapability = false;
    bool coordinatorCapability = false;
    bool traficSupport = false;
    bool broadcastSupport = false;
    bool peerToPeerSupport = false;
    bool starSupport = false;
    deviceType_t deviceType = static_cast<deviceType_t>(-1);
    bool beaconSupport = false;
    bool dimmingSupport = false;
    bool continuousVisibilityTransmission = false;
    bool cvdSupport = false;
    bool phyISupport = false;
    bool phyIISupport = false;
    bool phyIIISupport = false;
    colorStabilizationScheme_t colorStabilizationCapability = static_cast<colorStabilizationScheme_t>(-1);
    maxSupportedOpticalClock_t maxTxClock = static_cast<maxSupportedOpticalClock_t>(-1);
    maxSupportedOpticalClock_t maxRxClock = static_cast<maxSupportedOpticalClock_t>(-1);
    bool explicitClockNotificationRequest = false;
    bool ccaSupport = false;
    bool phyIVSupport = false;
    bool phyVSupport = false;
    bool phyVISupport = false;
    uint8_t numberOfOpticalSources = 0;
    uint8_t multipleDirectionSupport = 0;
    uint16_t numberOfCellsSupported = 0;
    uint8_t bandsUsedForPhy3 = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const capabilityInformation_t& a);
void __doUnpacking(omnetpp::cCommBuffer *b, capabilityInformation_t& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const capabilityInformation_t& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, capabilityInformation_t& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from msgs//types.msg:94 by opp_msgtool.
 */
struct security_t
{
    security_t();
    uint8_t securityLevel = 0;
    uint8_t keyIdMode = 0;
    uint64_t keySource = 0;
    uint8_t keyIndex = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const security_t& a);
void __doUnpacking(omnetpp::cCommBuffer *b, security_t& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const security_t& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, security_t& obj) { __doUnpacking(b, obj); }

/**
 * Enum generated from <tt>msgs//types.msg:101</tt> by opp_msgtool.
 * <pre>
 * enum commandFrameIdentifier_t
 * {
 *     ASSOCIATION_REQUEST = 0x01;
 *     ASSOCIATION_RESPONSE = 0x02;
 *     DISASSOCIATION_NOTIFICATION = 0x03;
 *     DATA_REQUEST = 0x04;
 *     OWPAN_ID_CONFLICT_NOTIFICATION = 0x05;
 *     BEACON_REQUEST = 0x06;
 *     COORDINATOR_REALIGNMENT = 0x07;
 *     GTS_REQUEST = 0x08;
 *     BLINKING_NOTIFICATION = 0x09;
 *     DIMMING_NOTIFICATION = 0x0a;
 *     FAST_LINK_RECOVERY = 0x0b;
 *     MOBILITY_NOTIFICATION = 0x0c;
 *     GTS_RESPONSE = 0x0d;
 *     CLOCK_RATE_CHANGE_NOTIFICATION = 0x0e;
 *     MULTIPLE_CHANNEL_ASSIGNMENT = 0x0f;
 *     BAND_HOPING = 0x10;
 *     COLOR_STABILIZATION_TIMER_NOTIFICATION = 0x11;
 *     COLOR_STABILIZATION_INFORMATION = 0x12;
 *     CVD_DISABLE = 0x13;
 *     INFORMATION_ELEMENT = 0x14;
 * }
 * </pre>
 */
enum commandFrameIdentifier_t {
    ASSOCIATION_REQUEST = 0x01,
    ASSOCIATION_RESPONSE = 0x02,
    DISASSOCIATION_NOTIFICATION = 0x03,
    DATA_REQUEST = 0x04,
    OWPAN_ID_CONFLICT_NOTIFICATION = 0x05,
    BEACON_REQUEST = 0x06,
    COORDINATOR_REALIGNMENT = 0x07,
    GTS_REQUEST = 0x08,
    BLINKING_NOTIFICATION = 0x09,
    DIMMING_NOTIFICATION = 0x0a,
    FAST_LINK_RECOVERY = 0x0b,
    MOBILITY_NOTIFICATION = 0x0c,
    GTS_RESPONSE = 0x0d,
    CLOCK_RATE_CHANGE_NOTIFICATION = 0x0e,
    MULTIPLE_CHANNEL_ASSIGNMENT = 0x0f,
    BAND_HOPING = 0x10,
    COLOR_STABILIZATION_TIMER_NOTIFICATION = 0x11,
    COLOR_STABILIZATION_INFORMATION = 0x12,
    CVD_DISABLE = 0x13,
    INFORMATION_ELEMENT = 0x14
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const commandFrameIdentifier_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, commandFrameIdentifier_t& e) { int n; b->unpack(n); e = static_cast<commandFrameIdentifier_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:124</tt> by opp_msgtool.
 * <pre>
 * enum macStatus_t
 * {
 *     ASSOCIATION_SUCCESSFUL = 0x00;
 *     OWPAN_AT_CAPACITY = 0x01;
 *     OWPAN_ACCESS_DENIED = 0x02;
 *     SUCCESS = 0x80;
 *     TRANSACTION_OVERFLOW = 0x81;
 *     TRANSACTION_EXPIRED = 0x82;
 *     CHANNEL_ACCESS_FAILURE = 0x83;
 *     INVALID_ADDRESS = 0x84;
 *     INVALID_GTS = 0x85;
 *     NO_ACK = 0x86;
 *     COUNTER_ERROR = 0x87;
 *     FRAME_TOO_LONG = 0x88;
 *     UNAVAILABLE_KEY = 0x89;
 *     UNSUPPORTED_SECURITY = 0x8a;
 *     INVALID_PARAMETER = 0x8b;
 *     INVALID_INDEX = 0x8c;
 *     UNSUPPORTED_ATTRIBUTE_MAC = 0x8d;
 *     READ_ONLY = 0x8e;
 *     SCAN_IN_PROGRESS = 0x8f;
 * }
 * </pre>
 */
enum macStatus_t {
    ASSOCIATION_SUCCESSFUL = 0x00,
    OWPAN_AT_CAPACITY = 0x01,
    OWPAN_ACCESS_DENIED = 0x02,
    SUCCESS = 0x80,
    TRANSACTION_OVERFLOW = 0x81,
    TRANSACTION_EXPIRED = 0x82,
    CHANNEL_ACCESS_FAILURE = 0x83,
    INVALID_ADDRESS = 0x84,
    INVALID_GTS = 0x85,
    NO_ACK = 0x86,
    COUNTER_ERROR = 0x87,
    FRAME_TOO_LONG = 0x88,
    UNAVAILABLE_KEY = 0x89,
    UNSUPPORTED_SECURITY = 0x8a,
    INVALID_PARAMETER = 0x8b,
    INVALID_INDEX = 0x8c,
    UNSUPPORTED_ATTRIBUTE_MAC = 0x8d,
    READ_ONLY = 0x8e,
    SCAN_IN_PROGRESS = 0x8f
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const macStatus_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, macStatus_t& e) { int n; b->unpack(n); e = static_cast<macStatus_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:146</tt> by opp_msgtool.
 * <pre>
 * enum frameType_t
 * {
 *     beacon = 0;
 *     data = 1;
 *     ack = 2;
 *     command = 3;
 *     cvd = 4;
 * }
 * </pre>
 */
enum frameType_t {
    beacon = 0,
    data = 1,
    ack = 2,
    command = 3,
    cvd = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const frameType_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, frameType_t& e) { int n; b->unpack(n); e = static_cast<frameType_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:154</tt> by opp_msgtool.
 * <pre>
 * enum addressingMode_t
 * {
 *     noAddress = 0;
 *     broadcast = 1;
 *     bit16 = 2;
 *     bit64 = 3;
 * }
 * </pre>
 */
enum addressingMode_t {
    noAddress = 0,
    broadcast = 1,
    bit16 = 2,
    bit64 = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const addressingMode_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, addressingMode_t& e) { int n; b->unpack(n); e = static_cast<addressingMode_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:161</tt> by opp_msgtool.
 * <pre>
 * enum dataType_t
 * {
 *     single = 0;
 *     packed = 1;
 *     burst = 2;
 * }
 * </pre>
 */
enum dataType_t {
    single = 0,
    packed = 1,
    burst = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const dataType_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, dataType_t& e) { int n; b->unpack(n); e = static_cast<dataType_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:167</tt> by opp_msgtool.
 * <pre>
 * enum PIBAttribute_t
 * {
 *     PHY_CURRENT_CHANNEL = 0x00;
 *     PHY_CCA_MODE = 0x01;
 *     PHY_DIM = 0x02;
 *     PHY_USE_EXTENDED_MODE = 0x03;
 *     PHY_COLOR_FUNCTION = 0x04;
 *     PHY_BLINKING_NOTIFICATION_FREQUENCY = 0x05;
 *     PHY_OCC_ENABLE = 0x06;
 *     PHY_OCC_MCS_ID = 0x07;
 *     PHY_PSDU_LENGTH = 0x08;
 * 
 *     MAC_ACK_WAIT_DURATION = 0x40;
 *     MAC_ASSOCIATED_OWPAN_COORD = 0x41;
 *     MAC_ASSOCIATED_PERMIT = 0x42;
 *     MAC_AUTO_REQUEST = 0x43;
 *     MAC_BEACON_PAYLOAD = 0x44;
 *     MAC_BEACON_PAYLOAD_LENGTH = 0x45;
 *     MAC_BEACON_ORDER = 0x46;
 *     MAC_BEACON_TX_TIME = 0x47;
 *     MAC_BSN = 0x48;
 *     MAC_COORD_EXTENDED_ADDRESS = 0x49;
 *     MAC_COORD_SHORT_ADDRESS = 0x4a;
 *     MAC_DSN = 0x4b;
 *     MAC_GTS_PERMIT = 0x4c;
 *     MAC_MAX_BE = 0x4d;
 *     MAC_MAX_CSMA_BACKOFFS = 0x4e;
 *     MAC_MAX_FRAME_TOTAL_WAIT_TIME = 0x4f;
 *     MAC_MAX_FRAME_RETRIES = 0x50;
 *     MAC_MIN_BE = 0x51;
 *     MAC_MIN_LIFS_PERIOD = 0x52;
 *     MAC_MIN_SIFS_PERIOD = 0x53;
 *     MAC_OWPAN_ID = 0x54;
 *     MAC_RESPONSE_WAIT_TIME = 0x55;
 *     MAC_RX_ON_WHEN_IDLE = 0x56;
 *     MAC_SECURITY_ENABLED = 0x57;
 *     MAC_SHORT_ADDRESS = 0x58;
 *     MAC_SUPERFRAME_ORDER = 0x59;
 *     MAC_TIMESTAMP_SUPPORTED = 0x5a;
 *     MAC_TRANSACTION_PERSISTENCE_TIME = 0x5b;
 *     MAC_DIM = 0x5c;
 *     MAC_NUM_ACKS = 0x5d;
 *     MAC_LINK_TIME_OUT = 0x5e;
 *     MAC_DIM_OVERRIDE_REQUEST = 0x5f;
 *     MAC_DIM_PWM_OVERRIDE_REQUEST = 0x60;
 *     MAC_DIM_DATA_FAILURE_INDICATION = 0x61;
 *     MAC_DURING_ASSOC_COLOR = 0x62;
 *     MAC_DURING_DISASSOC_COLOR = 0x63;
 *     MAC_DURING_SCAN_COLOR = 0x64;
 *     MAC_COLOR_RECEIVED = 0x65;
 *     MAC_COLOR_NOT_RECEIVED = 0x66;
 *     MAC_CQI_COLOR_LFER = 0x67;
 *     MAC_CQI_COLOR_MFER = 0x68;
 *     MAC_CQI_COLOR_HFER = 0x69;
 *     MAC_CF_APP_COLOR = 0x6a;
 *     MAC_COLOR_STABILIZATION = 0x6b;
 *     MAC_COLOR_STABILIZATION_TIMER = 0x6c;
 *     MAC_USE_DIMMED_OOK_MODE = 0x6d;
 *     MAC_TIME_STAMP_OFFSET = 0x6e;
 *     MAC_USE_BLINKING_NOTIFICATION = 0x6f;
 *     MAC_BLINKING_NOTIFICATION_FREQUENCY = 0x70;
 *     MAC_LED_ID_AMBIGUITY_RESOLUTION = 0x71;
 *     MAC_FRAME_CONTROL = 0x72;
 *     MAC_SEQUENCE_NUMBER = 0x73;
 *     MAC_DESTINATION_OWPAN_IDENTIFIER = 0x74;
 *     MAC_DESTINATION_ADDRESS = 0x75;
 *     MAC_SOURCE_OWPAN_IDENTIFIER = 0x76;
 *     MAC_SOURCE_ADDRESS = 0x77;
 *     MAC_ACKNOWLEDGE_FIELD = 0x78;
 *     MAC_FRAME_PAYLOAD = 0x79;
 *     MAC_FCS = 0x7a;
 *     MAC_MSDU_LENGTH = 0x7b;
 *     MAC_OFFSET_VPWM_DATA_USAGE = 0x7c;
 *     MAC_2DCODE_TX_DATA_TYPE = 0x7d;
 * }
 * </pre>
 */
enum PIBAttribute_t {
    PHY_CURRENT_CHANNEL = 0x00,
    PHY_CCA_MODE = 0x01,
    PHY_DIM = 0x02,
    PHY_USE_EXTENDED_MODE = 0x03,
    PHY_COLOR_FUNCTION = 0x04,
    PHY_BLINKING_NOTIFICATION_FREQUENCY = 0x05,
    PHY_OCC_ENABLE = 0x06,
    PHY_OCC_MCS_ID = 0x07,
    PHY_PSDU_LENGTH = 0x08,
    MAC_ACK_WAIT_DURATION = 0x40,
    MAC_ASSOCIATED_OWPAN_COORD = 0x41,
    MAC_ASSOCIATED_PERMIT = 0x42,
    MAC_AUTO_REQUEST = 0x43,
    MAC_BEACON_PAYLOAD = 0x44,
    MAC_BEACON_PAYLOAD_LENGTH = 0x45,
    MAC_BEACON_ORDER = 0x46,
    MAC_BEACON_TX_TIME = 0x47,
    MAC_BSN = 0x48,
    MAC_COORD_EXTENDED_ADDRESS = 0x49,
    MAC_COORD_SHORT_ADDRESS = 0x4a,
    MAC_DSN = 0x4b,
    MAC_GTS_PERMIT = 0x4c,
    MAC_MAX_BE = 0x4d,
    MAC_MAX_CSMA_BACKOFFS = 0x4e,
    MAC_MAX_FRAME_TOTAL_WAIT_TIME = 0x4f,
    MAC_MAX_FRAME_RETRIES = 0x50,
    MAC_MIN_BE = 0x51,
    MAC_MIN_LIFS_PERIOD = 0x52,
    MAC_MIN_SIFS_PERIOD = 0x53,
    MAC_OWPAN_ID = 0x54,
    MAC_RESPONSE_WAIT_TIME = 0x55,
    MAC_RX_ON_WHEN_IDLE = 0x56,
    MAC_SECURITY_ENABLED = 0x57,
    MAC_SHORT_ADDRESS = 0x58,
    MAC_SUPERFRAME_ORDER = 0x59,
    MAC_TIMESTAMP_SUPPORTED = 0x5a,
    MAC_TRANSACTION_PERSISTENCE_TIME = 0x5b,
    MAC_DIM = 0x5c,
    MAC_NUM_ACKS = 0x5d,
    MAC_LINK_TIME_OUT = 0x5e,
    MAC_DIM_OVERRIDE_REQUEST = 0x5f,
    MAC_DIM_PWM_OVERRIDE_REQUEST = 0x60,
    MAC_DIM_DATA_FAILURE_INDICATION = 0x61,
    MAC_DURING_ASSOC_COLOR = 0x62,
    MAC_DURING_DISASSOC_COLOR = 0x63,
    MAC_DURING_SCAN_COLOR = 0x64,
    MAC_COLOR_RECEIVED = 0x65,
    MAC_COLOR_NOT_RECEIVED = 0x66,
    MAC_CQI_COLOR_LFER = 0x67,
    MAC_CQI_COLOR_MFER = 0x68,
    MAC_CQI_COLOR_HFER = 0x69,
    MAC_CF_APP_COLOR = 0x6a,
    MAC_COLOR_STABILIZATION = 0x6b,
    MAC_COLOR_STABILIZATION_TIMER = 0x6c,
    MAC_USE_DIMMED_OOK_MODE = 0x6d,
    MAC_TIME_STAMP_OFFSET = 0x6e,
    MAC_USE_BLINKING_NOTIFICATION = 0x6f,
    MAC_BLINKING_NOTIFICATION_FREQUENCY = 0x70,
    MAC_LED_ID_AMBIGUITY_RESOLUTION = 0x71,
    MAC_FRAME_CONTROL = 0x72,
    MAC_SEQUENCE_NUMBER = 0x73,
    MAC_DESTINATION_OWPAN_IDENTIFIER = 0x74,
    MAC_DESTINATION_ADDRESS = 0x75,
    MAC_SOURCE_OWPAN_IDENTIFIER = 0x76,
    MAC_SOURCE_ADDRESS = 0x77,
    MAC_ACKNOWLEDGE_FIELD = 0x78,
    MAC_FRAME_PAYLOAD = 0x79,
    MAC_FCS = 0x7a,
    MAC_MSDU_LENGTH = 0x7b,
    MAC_OFFSET_VPWM_DATA_USAGE = 0x7c,
    MAC_2DCODE_TX_DATA_TYPE = 0x7d
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PIBAttribute_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PIBAttribute_t& e) { int n; b->unpack(n); e = static_cast<PIBAttribute_t>(n); }

/**
 * Struct generated from msgs//types.msg:242 by opp_msgtool.
 */
struct OWPANDescritpor_t
{
    OWPANDescritpor_t();
    addressingMode_t coordAddrMode = static_cast<addressingMode_t>(-1);
    uint16_t coordOWPANId = 0;
    uint64_t coordAddress = 0;
    opticalChannel_t logicalChannel = static_cast<opticalChannel_t>(-1);
    uint16_t superframeSpec = 0;
    bool GTSPermit = false;
    uint8_t linkQuality = 0;
    uint32_t timeStamp = 0;
    uint8_t securityFailure = 0;
    uint8_t securityLevel = 0;
    uint8_t keyIdMode = 0;
    uint64_t keySource = 0;
    uint8_t keyIndex = 0;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const OWPANDescritpor_t& a);
void __doUnpacking(omnetpp::cCommBuffer *b, OWPANDescritpor_t& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OWPANDescritpor_t& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OWPANDescritpor_t& obj) { __doUnpacking(b, obj); }

/**
 * Enum generated from <tt>msgs//types.msg:258</tt> by opp_msgtool.
 * <pre>
 * enum scanType_t
 * {
 *     ACTIVE_SCAN = 0x00;
 *     PASSIVE_SCAN = 0x01;
 *     SCAN_OVER_BACKHAUL = 0x10;
 * }
 * </pre>
 */
enum scanType_t {
    ACTIVE_SCAN = 0x00,
    PASSIVE_SCAN = 0x01,
    SCAN_OVER_BACKHAUL = 0x10
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const scanType_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, scanType_t& e) { int n; b->unpack(n); e = static_cast<scanType_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:265</tt> by opp_msgtool.
 * <pre>
 * enum MCS_t
 * {
 *     PHYI_11_67K = 0x00;
 *     PHYI_24_44K = 0x01;
 *     PHYI_48_89K = 0x02;
 *     PHYI_73_3K = 0x03;
 *     PHYI_100K = 0x04;
 *     PHYI_35_56K = 0x05;
 *     PHYI_71_11K = 0x06;
 *     PHYI_124_4K = 0x07;
 *     PHYI_266_6K = 0x08;
 * 
 *     PHYII_1_25M = 0x10;
 *     PHYII_2M = 0x11;
 *     PHYII_2_5M = 0x12;
 *     PHYII_4M = 0x13;
 *     PHYII_5M = 0x14;
 *     PHYII_6M = 0x15;
 *     PHYII_9_6M = 0x16;
 *     PHYII_12M = 0x17;
 *     PHYII_19_2M = 0x18;
 *     PHYII_24M = 0x19;
 *     PHYII_38_4M = 0x1a;
 *     PHYII_48M = 0x1b;
 *     PHYII_76_8M = 0x1c;
 *     PHYII_96M = 0x1d;
 * }
 * </pre>
 */
enum MCS_t {
    PHYI_11_67K = 0x00,
    PHYI_24_44K = 0x01,
    PHYI_48_89K = 0x02,
    PHYI_73_3K = 0x03,
    PHYI_100K = 0x04,
    PHYI_35_56K = 0x05,
    PHYI_71_11K = 0x06,
    PHYI_124_4K = 0x07,
    PHYI_266_6K = 0x08,
    PHYII_1_25M = 0x10,
    PHYII_2M = 0x11,
    PHYII_2_5M = 0x12,
    PHYII_4M = 0x13,
    PHYII_5M = 0x14,
    PHYII_6M = 0x15,
    PHYII_9_6M = 0x16,
    PHYII_12M = 0x17,
    PHYII_19_2M = 0x18,
    PHYII_24M = 0x19,
    PHYII_38_4M = 0x1a,
    PHYII_48M = 0x1b,
    PHYII_76_8M = 0x1c,
    PHYII_96M = 0x1d
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MCS_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MCS_t& e) { int n; b->unpack(n); e = static_cast<MCS_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:293</tt> by opp_msgtool.
 * <pre>
 * enum phyStatus_t
 * {
 *     BUSY = 0x00;
 *     BUSY_RX = 0x01;
 *     BUSY_TX = 0x02;
 *     FORCE_TRX_OFF = 0x03;
 *     IDLE = 0x04;
 *     INVALID_PARAMETER_PHY = 0x05;
 *     RX_ON = 0x06;
 *     SUCCESS_PHY = 0x07;
 *     TRX_OFF = 0x08;
 *     TX_ON = 0x09;
 *     UNSUPPORTED_ATTRIBUTE = 0x0a;
 * }
 * </pre>
 */
enum phyStatus_t {
    BUSY = 0x00,
    BUSY_RX = 0x01,
    BUSY_TX = 0x02,
    FORCE_TRX_OFF = 0x03,
    IDLE = 0x04,
    INVALID_PARAMETER_PHY = 0x05,
    RX_ON = 0x06,
    SUCCESS_PHY = 0x07,
    TRX_OFF = 0x08,
    TX_ON = 0x09,
    UNSUPPORTED_ATTRIBUTE = 0x0a
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const phyStatus_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, phyStatus_t& e) { int n; b->unpack(n); e = static_cast<phyStatus_t>(n); }

/**
 * Enum generated from <tt>msgs//types.msg:307</tt> by opp_msgtool.
 * <pre>
 * enum topology_t
 * {
 *     TOPOLOGY_INDEPENDENT = 0x00;
 *     TOPOLOGY_PEER_TO_PEER = 0x01;
 *     TOPOLOGY_STAR = 0x02;
 *     TOPOLOGY_BROADCAST = 0x03;
 * }
 * </pre>
 */
enum topology_t {
    TOPOLOGY_INDEPENDENT = 0x00,
    TOPOLOGY_PEER_TO_PEER = 0x01,
    TOPOLOGY_STAR = 0x02,
    TOPOLOGY_BROADCAST = 0x03
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const topology_t& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, topology_t& e) { int n; b->unpack(n); e = static_cast<topology_t>(n); }


namespace omnetpp {

inline any_ptr toAnyPtr(const capabilityInformation_t *p) {return any_ptr(p);}
template<> inline capabilityInformation_t *fromAnyPtr(any_ptr ptr) { return ptr.get<capabilityInformation_t>(); }
inline any_ptr toAnyPtr(const security_t *p) {return any_ptr(p);}
template<> inline security_t *fromAnyPtr(any_ptr ptr) { return ptr.get<security_t>(); }
inline any_ptr toAnyPtr(const OWPANDescritpor_t *p) {return any_ptr(p);}
template<> inline OWPANDescritpor_t *fromAnyPtr(any_ptr ptr) { return ptr.get<OWPANDescritpor_t>(); }

}  // namespace omnetpp

#endif // ifndef __TYPES_M_H

