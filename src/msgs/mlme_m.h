//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgs/mlme.msg.
//

#ifndef __MLME_M_H
#define __MLME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MLMEAssociateRequest;
class MLMEAssociateConfirm;
class MLMEAssociateResponse;
class MLMEAssociateIndication;
class MLMEBeaconNotifyIndication;
class MLMECommStatusIndication;
class MLMEDisassociateRequest;
class MLMEDisassociateConfirm;
class MLMEDisassociateIndication;
class MLMEGetRequest;
class MLMEGetConfirm;
class MLMEGTSRequest;
class MLMEGTSConfirm;
class MLMEGTSIndication;
class MLMEPollRequest;
class MLMEPollConfirm;
class MLMEResetRequest;
class MLMEResetConfirm;
class MLMERxEnableRequest;
class MLMERxEnableConfirm;
class MLMEScanRequest;
class MLMEScanConfirm;
class MLMESetRequest;
class MLMESetConfirm;
class MLMEStartRequest;
class MLMEStartConfirm;
class MLMESyncRequest;
class MLMESyncLossIndication;
#include "types_m.h" // import types

/**
 * Class generated from <tt>msgs/mlme.msg:18</tt> by opp_msgtool.
 * <pre>
 * message MLMEAssociateRequest
 * {
 *     int logicalChannel;
 *     int coordAddrMode;
 *     int coordOWPANId;
 *     int coordAddress;
 *     uint64_t capabilityInformation;
 *     int securityLevel;
 *     bool colorAssoc;
 * }
 * </pre>
 */
class MLMEAssociateRequest : public ::omnetpp::cMessage
{
  protected:
    int logicalChannel = 0;
    int coordAddrMode = 0;
    int coordOWPANId = 0;
    int coordAddress = 0;
    uint64_t capabilityInformation = 0;
    int securityLevel = 0;
    bool colorAssoc = false;

  private:
    void copy(const MLMEAssociateRequest& other);

  protected:
    bool operator==(const MLMEAssociateRequest&) = delete;

  public:
    MLMEAssociateRequest(const char *name=nullptr, short kind=0);
    MLMEAssociateRequest(const MLMEAssociateRequest& other);
    virtual ~MLMEAssociateRequest();
    MLMEAssociateRequest& operator=(const MLMEAssociateRequest& other);
    virtual MLMEAssociateRequest *dup() const override {return new MLMEAssociateRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getLogicalChannel() const;
    virtual void setLogicalChannel(int logicalChannel);

    virtual int getCoordAddrMode() const;
    virtual void setCoordAddrMode(int coordAddrMode);

    virtual int getCoordOWPANId() const;
    virtual void setCoordOWPANId(int coordOWPANId);

    virtual int getCoordAddress() const;
    virtual void setCoordAddress(int coordAddress);

    virtual uint64_t getCapabilityInformation() const;
    virtual void setCapabilityInformation(uint64_t capabilityInformation);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);

    virtual bool getColorAssoc() const;
    virtual void setColorAssoc(bool colorAssoc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEAssociateRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEAssociateRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:28</tt> by opp_msgtool.
 * <pre>
 * message MLMEAssociateConfirm
 * {
 *     uint16_t assocShortAddress;
 *     macStatus_t status;
 *     colorStabilizationScheme_t capabilityNegotiationResponse;
 *     uint8_t securityLevel;
 * }
 * </pre>
 */
class MLMEAssociateConfirm : public ::omnetpp::cMessage
{
  protected:
    uint16_t assocShortAddress = 0;
    macStatus_t status = static_cast<macStatus_t>(-1);
    colorStabilizationScheme_t capabilityNegotiationResponse = static_cast<colorStabilizationScheme_t>(-1);
    uint8_t securityLevel = 0;

  private:
    void copy(const MLMEAssociateConfirm& other);

  protected:
    bool operator==(const MLMEAssociateConfirm&) = delete;

  public:
    MLMEAssociateConfirm(const char *name=nullptr, short kind=0);
    MLMEAssociateConfirm(const MLMEAssociateConfirm& other);
    virtual ~MLMEAssociateConfirm();
    MLMEAssociateConfirm& operator=(const MLMEAssociateConfirm& other);
    virtual MLMEAssociateConfirm *dup() const override {return new MLMEAssociateConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getAssocShortAddress() const;
    virtual void setAssocShortAddress(uint16_t assocShortAddress);

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);

    virtual colorStabilizationScheme_t getCapabilityNegotiationResponse() const;
    virtual void setCapabilityNegotiationResponse(colorStabilizationScheme_t capabilityNegotiationResponse);

    virtual uint8_t getSecurityLevel() const;
    virtual void setSecurityLevel(uint8_t securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEAssociateConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEAssociateConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:35</tt> by opp_msgtool.
 * <pre>
 * message MLMEAssociateResponse
 * {
 *     uint64_t deviceAddress;
 *     int assocShortAddress;
 *     uint8_t status;
 *     int capabilityNegotationResponse;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEAssociateResponse : public ::omnetpp::cMessage
{
  protected:
    uint64_t deviceAddress = 0;
    int assocShortAddress = 0;
    uint8_t status = 0;
    int capabilityNegotationResponse = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEAssociateResponse& other);

  protected:
    bool operator==(const MLMEAssociateResponse&) = delete;

  public:
    MLMEAssociateResponse(const char *name=nullptr, short kind=0);
    MLMEAssociateResponse(const MLMEAssociateResponse& other);
    virtual ~MLMEAssociateResponse();
    MLMEAssociateResponse& operator=(const MLMEAssociateResponse& other);
    virtual MLMEAssociateResponse *dup() const override {return new MLMEAssociateResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint64_t deviceAddress);

    virtual int getAssocShortAddress() const;
    virtual void setAssocShortAddress(int assocShortAddress);

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);

    virtual int getCapabilityNegotationResponse() const;
    virtual void setCapabilityNegotationResponse(int capabilityNegotationResponse);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEAssociateResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEAssociateResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:43</tt> by opp_msgtool.
 * <pre>
 * message MLMEAssociateIndication
 * {
 *     uint64_t deviceAddress;
 *     uint64_t capabilityInformation;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEAssociateIndication : public ::omnetpp::cMessage
{
  protected:
    uint64_t deviceAddress = 0;
    uint64_t capabilityInformation = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEAssociateIndication& other);

  protected:
    bool operator==(const MLMEAssociateIndication&) = delete;

  public:
    MLMEAssociateIndication(const char *name=nullptr, short kind=0);
    MLMEAssociateIndication(const MLMEAssociateIndication& other);
    virtual ~MLMEAssociateIndication();
    MLMEAssociateIndication& operator=(const MLMEAssociateIndication& other);
    virtual MLMEAssociateIndication *dup() const override {return new MLMEAssociateIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint64_t deviceAddress);

    virtual uint64_t getCapabilityInformation() const;
    virtual void setCapabilityInformation(uint64_t capabilityInformation);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEAssociateIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEAssociateIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:51</tt> by opp_msgtool.
 * <pre>
 * message MLMEBeaconNotifyIndication
 * {
 *     int BSN;
 *     uint8_t OWPANDescriptor;
 *     uint8_t pendAddrSpec;
 *     uint8_t addrList[];
 *     int sduLength;
 *     uint8_t sdu[];
 * }
 * </pre>
 */
class MLMEBeaconNotifyIndication : public ::omnetpp::cMessage
{
  protected:
    int BSN = 0;
    uint8_t OWPANDescriptor = 0;
    uint8_t pendAddrSpec = 0;
    uint8_t *addrList = nullptr;
    size_t addrList_arraysize = 0;
    int sduLength = 0;
    uint8_t *sdu = nullptr;
    size_t sdu_arraysize = 0;

  private:
    void copy(const MLMEBeaconNotifyIndication& other);

  protected:
    bool operator==(const MLMEBeaconNotifyIndication&) = delete;

  public:
    MLMEBeaconNotifyIndication(const char *name=nullptr, short kind=0);
    MLMEBeaconNotifyIndication(const MLMEBeaconNotifyIndication& other);
    virtual ~MLMEBeaconNotifyIndication();
    MLMEBeaconNotifyIndication& operator=(const MLMEBeaconNotifyIndication& other);
    virtual MLMEBeaconNotifyIndication *dup() const override {return new MLMEBeaconNotifyIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getBSN() const;
    virtual void setBSN(int BSN);

    virtual uint8_t getOWPANDescriptor() const;
    virtual void setOWPANDescriptor(uint8_t OWPANDescriptor);

    virtual uint8_t getPendAddrSpec() const;
    virtual void setPendAddrSpec(uint8_t pendAddrSpec);

    virtual void setAddrListArraySize(size_t size);
    virtual size_t getAddrListArraySize() const;
    virtual uint8_t getAddrList(size_t k) const;
    virtual void setAddrList(size_t k, uint8_t addrList);
    virtual void insertAddrList(size_t k, uint8_t addrList);
    [[deprecated]] void insertAddrList(uint8_t addrList) {appendAddrList(addrList);}
    virtual void appendAddrList(uint8_t addrList);
    virtual void eraseAddrList(size_t k);

    virtual int getSduLength() const;
    virtual void setSduLength(int sduLength);

    virtual void setSduArraySize(size_t size);
    virtual size_t getSduArraySize() const;
    virtual uint8_t getSdu(size_t k) const;
    virtual void setSdu(size_t k, uint8_t sdu);
    virtual void insertSdu(size_t k, uint8_t sdu);
    [[deprecated]] void insertSdu(uint8_t sdu) {appendSdu(sdu);}
    virtual void appendSdu(uint8_t sdu);
    virtual void eraseSdu(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEBeaconNotifyIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEBeaconNotifyIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:62</tt> by opp_msgtool.
 * <pre>
 * message MLMECommStatusIndication
 * {
 *     int OWPANId;
 *     int srcAddrMode;
 *     uint64_t srcAddr;
 *     int dstAddrMode;
 *     uint64_t dstAddr;
 *     uint8_t status;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMECommStatusIndication : public ::omnetpp::cMessage
{
  protected:
    int OWPANId = 0;
    int srcAddrMode = 0;
    uint64_t srcAddr = 0;
    int dstAddrMode = 0;
    uint64_t dstAddr = 0;
    uint8_t status = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMECommStatusIndication& other);

  protected:
    bool operator==(const MLMECommStatusIndication&) = delete;

  public:
    MLMECommStatusIndication(const char *name=nullptr, short kind=0);
    MLMECommStatusIndication(const MLMECommStatusIndication& other);
    virtual ~MLMECommStatusIndication();
    MLMECommStatusIndication& operator=(const MLMECommStatusIndication& other);
    virtual MLMECommStatusIndication *dup() const override {return new MLMECommStatusIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOWPANId() const;
    virtual void setOWPANId(int OWPANId);

    virtual int getSrcAddrMode() const;
    virtual void setSrcAddrMode(int srcAddrMode);

    virtual uint64_t getSrcAddr() const;
    virtual void setSrcAddr(uint64_t srcAddr);

    virtual int getDstAddrMode() const;
    virtual void setDstAddrMode(int dstAddrMode);

    virtual uint64_t getDstAddr() const;
    virtual void setDstAddr(uint64_t dstAddr);

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMECommStatusIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMECommStatusIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:74</tt> by opp_msgtool.
 * <pre>
 * message MLMEDisassociateRequest
 * {
 *     int deviceAddrMode;
 *     int deviceOWPANId;
 *     uint64_t deviceAddress;
 *     int disassociateReason;
 *     bool txIndirect;
 *     int securityLevel;
 *     bool colorDisAssoc;
 * }
 * </pre>
 */
class MLMEDisassociateRequest : public ::omnetpp::cMessage
{
  protected:
    int deviceAddrMode = 0;
    int deviceOWPANId = 0;
    uint64_t deviceAddress = 0;
    int disassociateReason = 0;
    bool txIndirect = false;
    int securityLevel = 0;
    bool colorDisAssoc = false;

  private:
    void copy(const MLMEDisassociateRequest& other);

  protected:
    bool operator==(const MLMEDisassociateRequest&) = delete;

  public:
    MLMEDisassociateRequest(const char *name=nullptr, short kind=0);
    MLMEDisassociateRequest(const MLMEDisassociateRequest& other);
    virtual ~MLMEDisassociateRequest();
    MLMEDisassociateRequest& operator=(const MLMEDisassociateRequest& other);
    virtual MLMEDisassociateRequest *dup() const override {return new MLMEDisassociateRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getDeviceAddrMode() const;
    virtual void setDeviceAddrMode(int deviceAddrMode);

    virtual int getDeviceOWPANId() const;
    virtual void setDeviceOWPANId(int deviceOWPANId);

    virtual uint64_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint64_t deviceAddress);

    virtual int getDisassociateReason() const;
    virtual void setDisassociateReason(int disassociateReason);

    virtual bool getTxIndirect() const;
    virtual void setTxIndirect(bool txIndirect);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);

    virtual bool getColorDisAssoc() const;
    virtual void setColorDisAssoc(bool colorDisAssoc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEDisassociateRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEDisassociateRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:84</tt> by opp_msgtool.
 * <pre>
 * message MLMEDisassociateConfirm
 * {
 *     macStatus_t status;
 *     addressingMode_t deviceAddrMode;
 *     uint16_t deviceOWPANId;
 *     uint64_t deviceAddress;
 * }
 * </pre>
 */
class MLMEDisassociateConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);
    addressingMode_t deviceAddrMode = static_cast<addressingMode_t>(-1);
    uint16_t deviceOWPANId = 0;
    uint64_t deviceAddress = 0;

  private:
    void copy(const MLMEDisassociateConfirm& other);

  protected:
    bool operator==(const MLMEDisassociateConfirm&) = delete;

  public:
    MLMEDisassociateConfirm(const char *name=nullptr, short kind=0);
    MLMEDisassociateConfirm(const MLMEDisassociateConfirm& other);
    virtual ~MLMEDisassociateConfirm();
    MLMEDisassociateConfirm& operator=(const MLMEDisassociateConfirm& other);
    virtual MLMEDisassociateConfirm *dup() const override {return new MLMEDisassociateConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);

    virtual addressingMode_t getDeviceAddrMode() const;
    virtual void setDeviceAddrMode(addressingMode_t deviceAddrMode);

    virtual uint16_t getDeviceOWPANId() const;
    virtual void setDeviceOWPANId(uint16_t deviceOWPANId);

    virtual uint64_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint64_t deviceAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEDisassociateConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEDisassociateConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:91</tt> by opp_msgtool.
 * <pre>
 * message MLMEDisassociateIndication
 * {
 *     uint64_t deviceAddress;
 *     int disassociateReason;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEDisassociateIndication : public ::omnetpp::cMessage
{
  protected:
    uint64_t deviceAddress = 0;
    int disassociateReason = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEDisassociateIndication& other);

  protected:
    bool operator==(const MLMEDisassociateIndication&) = delete;

  public:
    MLMEDisassociateIndication(const char *name=nullptr, short kind=0);
    MLMEDisassociateIndication(const MLMEDisassociateIndication& other);
    virtual ~MLMEDisassociateIndication();
    MLMEDisassociateIndication& operator=(const MLMEDisassociateIndication& other);
    virtual MLMEDisassociateIndication *dup() const override {return new MLMEDisassociateIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint64_t deviceAddress);

    virtual int getDisassociateReason() const;
    virtual void setDisassociateReason(int disassociateReason);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEDisassociateIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEDisassociateIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:99</tt> by opp_msgtool.
 * <pre>
 * message MLMEGetRequest
 * {
 *     PIBAttribute_t PIBAttribute;
 *     uint8_t PIBAttributeIndex;
 * }
 * </pre>
 */
class MLMEGetRequest : public ::omnetpp::cMessage
{
  protected:
    PIBAttribute_t PIBAttribute = static_cast<PIBAttribute_t>(-1);
    uint8_t PIBAttributeIndex = 0;

  private:
    void copy(const MLMEGetRequest& other);

  protected:
    bool operator==(const MLMEGetRequest&) = delete;

  public:
    MLMEGetRequest(const char *name=nullptr, short kind=0);
    MLMEGetRequest(const MLMEGetRequest& other);
    virtual ~MLMEGetRequest();
    MLMEGetRequest& operator=(const MLMEGetRequest& other);
    virtual MLMEGetRequest *dup() const override {return new MLMEGetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual PIBAttribute_t getPIBAttribute() const;
    virtual void setPIBAttribute(PIBAttribute_t PIBAttribute);

    virtual uint8_t getPIBAttributeIndex() const;
    virtual void setPIBAttributeIndex(uint8_t PIBAttributeIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEGetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEGetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:104</tt> by opp_msgtool.
 * <pre>
 * message MLMEGetConfirm
 * {
 *     macStatus_t status;
 *     PIBAttribute_t PIBAttribute;
 *     uint8_t PIBAttributeIndex;
 *     uint64_t PIBAttributeValue;
 * }
 * </pre>
 */
class MLMEGetConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);
    PIBAttribute_t PIBAttribute = static_cast<PIBAttribute_t>(-1);
    uint8_t PIBAttributeIndex = 0;
    uint64_t PIBAttributeValue = 0;

  private:
    void copy(const MLMEGetConfirm& other);

  protected:
    bool operator==(const MLMEGetConfirm&) = delete;

  public:
    MLMEGetConfirm(const char *name=nullptr, short kind=0);
    MLMEGetConfirm(const MLMEGetConfirm& other);
    virtual ~MLMEGetConfirm();
    MLMEGetConfirm& operator=(const MLMEGetConfirm& other);
    virtual MLMEGetConfirm *dup() const override {return new MLMEGetConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);

    virtual PIBAttribute_t getPIBAttribute() const;
    virtual void setPIBAttribute(PIBAttribute_t PIBAttribute);

    virtual uint8_t getPIBAttributeIndex() const;
    virtual void setPIBAttributeIndex(uint8_t PIBAttributeIndex);

    virtual uint64_t getPIBAttributeValue() const;
    virtual void setPIBAttributeValue(uint64_t PIBAttributeValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEGetConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEGetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:113</tt> by opp_msgtool.
 * <pre>
 * message MLMEGTSRequest
 * {
 *     uint8_t GTSCharacteristics;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEGTSRequest : public ::omnetpp::cMessage
{
  protected:
    uint8_t GTSCharacteristics = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEGTSRequest& other);

  protected:
    bool operator==(const MLMEGTSRequest&) = delete;

  public:
    MLMEGTSRequest(const char *name=nullptr, short kind=0);
    MLMEGTSRequest(const MLMEGTSRequest& other);
    virtual ~MLMEGTSRequest();
    MLMEGTSRequest& operator=(const MLMEGTSRequest& other);
    virtual MLMEGTSRequest *dup() const override {return new MLMEGTSRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getGTSCharacteristics() const;
    virtual void setGTSCharacteristics(uint8_t GTSCharacteristics);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEGTSRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEGTSRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:118</tt> by opp_msgtool.
 * <pre>
 * message MLMEGTSConfirm
 * {
 *     uint8_t GTSCharacteristics;
 *     macStatus_t status;
 * }
 * </pre>
 */
class MLMEGTSConfirm : public ::omnetpp::cMessage
{
  protected:
    uint8_t GTSCharacteristics = 0;
    macStatus_t status = static_cast<macStatus_t>(-1);

  private:
    void copy(const MLMEGTSConfirm& other);

  protected:
    bool operator==(const MLMEGTSConfirm&) = delete;

  public:
    MLMEGTSConfirm(const char *name=nullptr, short kind=0);
    MLMEGTSConfirm(const MLMEGTSConfirm& other);
    virtual ~MLMEGTSConfirm();
    MLMEGTSConfirm& operator=(const MLMEGTSConfirm& other);
    virtual MLMEGTSConfirm *dup() const override {return new MLMEGTSConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getGTSCharacteristics() const;
    virtual void setGTSCharacteristics(uint8_t GTSCharacteristics);

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEGTSConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEGTSConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:123</tt> by opp_msgtool.
 * <pre>
 * message MLMEGTSIndication
 * {
 *     uint16_t deviceAddress;
 *     uint8_t GTSCharacteristics;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEGTSIndication : public ::omnetpp::cMessage
{
  protected:
    uint16_t deviceAddress = 0;
    uint8_t GTSCharacteristics = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEGTSIndication& other);

  protected:
    bool operator==(const MLMEGTSIndication&) = delete;

  public:
    MLMEGTSIndication(const char *name=nullptr, short kind=0);
    MLMEGTSIndication(const MLMEGTSIndication& other);
    virtual ~MLMEGTSIndication();
    MLMEGTSIndication& operator=(const MLMEGTSIndication& other);
    virtual MLMEGTSIndication *dup() const override {return new MLMEGTSIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getDeviceAddress() const;
    virtual void setDeviceAddress(uint16_t deviceAddress);

    virtual uint8_t getGTSCharacteristics() const;
    virtual void setGTSCharacteristics(uint8_t GTSCharacteristics);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEGTSIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEGTSIndication& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:131</tt> by opp_msgtool.
 * <pre>
 * message MLMEPollRequest
 * {
 *     int coordAddrMode;
 *     int coordOWPANId;
 *     uint64_t coordAddress;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMEPollRequest : public ::omnetpp::cMessage
{
  protected:
    int coordAddrMode = 0;
    int coordOWPANId = 0;
    uint64_t coordAddress = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMEPollRequest& other);

  protected:
    bool operator==(const MLMEPollRequest&) = delete;

  public:
    MLMEPollRequest(const char *name=nullptr, short kind=0);
    MLMEPollRequest(const MLMEPollRequest& other);
    virtual ~MLMEPollRequest();
    MLMEPollRequest& operator=(const MLMEPollRequest& other);
    virtual MLMEPollRequest *dup() const override {return new MLMEPollRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getCoordAddrMode() const;
    virtual void setCoordAddrMode(int coordAddrMode);

    virtual int getCoordOWPANId() const;
    virtual void setCoordOWPANId(int coordOWPANId);

    virtual uint64_t getCoordAddress() const;
    virtual void setCoordAddress(uint64_t coordAddress);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEPollRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEPollRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:138</tt> by opp_msgtool.
 * <pre>
 * message MLMEPollConfirm
 * {
 *     macStatus_t status;
 * }
 * </pre>
 */
class MLMEPollConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);

  private:
    void copy(const MLMEPollConfirm& other);

  protected:
    bool operator==(const MLMEPollConfirm&) = delete;

  public:
    MLMEPollConfirm(const char *name=nullptr, short kind=0);
    MLMEPollConfirm(const MLMEPollConfirm& other);
    virtual ~MLMEPollConfirm();
    MLMEPollConfirm& operator=(const MLMEPollConfirm& other);
    virtual MLMEPollConfirm *dup() const override {return new MLMEPollConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEPollConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEPollConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:144</tt> by opp_msgtool.
 * <pre>
 * message MLMEResetRequest
 * {
 *     bool setDefaultPIB;
 * }
 * </pre>
 */
class MLMEResetRequest : public ::omnetpp::cMessage
{
  protected:
    bool setDefaultPIB = false;

  private:
    void copy(const MLMEResetRequest& other);

  protected:
    bool operator==(const MLMEResetRequest&) = delete;

  public:
    MLMEResetRequest(const char *name=nullptr, short kind=0);
    MLMEResetRequest(const MLMEResetRequest& other);
    virtual ~MLMEResetRequest();
    MLMEResetRequest& operator=(const MLMEResetRequest& other);
    virtual MLMEResetRequest *dup() const override {return new MLMEResetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSetDefaultPIB() const;
    virtual void setSetDefaultPIB(bool setDefaultPIB);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEResetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEResetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:148</tt> by opp_msgtool.
 * <pre>
 * message MLMEResetConfirm
 * {
 *     macStatus_t status;
 * }
 * </pre>
 */
class MLMEResetConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);

  private:
    void copy(const MLMEResetConfirm& other);

  protected:
    bool operator==(const MLMEResetConfirm&) = delete;

  public:
    MLMEResetConfirm(const char *name=nullptr, short kind=0);
    MLMEResetConfirm(const MLMEResetConfirm& other);
    virtual ~MLMEResetConfirm();
    MLMEResetConfirm& operator=(const MLMEResetConfirm& other);
    virtual MLMEResetConfirm *dup() const override {return new MLMEResetConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEResetConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEResetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:154</tt> by opp_msgtool.
 * <pre>
 * message MLMERxEnableRequest
 * {
 *     bool deferPermit;
 *     uint32_t rxOnTime;
 *     uint32_t rxOnDuration;
 * }
 * </pre>
 */
class MLMERxEnableRequest : public ::omnetpp::cMessage
{
  protected:
    bool deferPermit = false;
    uint32_t rxOnTime = 0;
    uint32_t rxOnDuration = 0;

  private:
    void copy(const MLMERxEnableRequest& other);

  protected:
    bool operator==(const MLMERxEnableRequest&) = delete;

  public:
    MLMERxEnableRequest(const char *name=nullptr, short kind=0);
    MLMERxEnableRequest(const MLMERxEnableRequest& other);
    virtual ~MLMERxEnableRequest();
    MLMERxEnableRequest& operator=(const MLMERxEnableRequest& other);
    virtual MLMERxEnableRequest *dup() const override {return new MLMERxEnableRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getDeferPermit() const;
    virtual void setDeferPermit(bool deferPermit);

    virtual uint32_t getRxOnTime() const;
    virtual void setRxOnTime(uint32_t rxOnTime);

    virtual uint32_t getRxOnDuration() const;
    virtual void setRxOnDuration(uint32_t rxOnDuration);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMERxEnableRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMERxEnableRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:160</tt> by opp_msgtool.
 * <pre>
 * message MLMERxEnableConfirm
 * {
 *     macStatus_t status;
 * }
 * </pre>
 */
class MLMERxEnableConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);

  private:
    void copy(const MLMERxEnableConfirm& other);

  protected:
    bool operator==(const MLMERxEnableConfirm&) = delete;

  public:
    MLMERxEnableConfirm(const char *name=nullptr, short kind=0);
    MLMERxEnableConfirm(const MLMERxEnableConfirm& other);
    virtual ~MLMERxEnableConfirm();
    MLMERxEnableConfirm& operator=(const MLMERxEnableConfirm& other);
    virtual MLMERxEnableConfirm *dup() const override {return new MLMERxEnableConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMERxEnableConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMERxEnableConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:166</tt> by opp_msgtool.
 * <pre>
 * message MLMEScanRequest
 * {
 *     scanType_t scanType;
 *     uint8_t scanChannels;
 *     int scanDuration;
 *     int securityLevel;
 *     bool colorScan;
 * }
 * </pre>
 */
class MLMEScanRequest : public ::omnetpp::cMessage
{
  protected:
    scanType_t scanType = static_cast<scanType_t>(-1);
    uint8_t scanChannels = 0;
    int scanDuration = 0;
    int securityLevel = 0;
    bool colorScan = false;

  private:
    void copy(const MLMEScanRequest& other);

  protected:
    bool operator==(const MLMEScanRequest&) = delete;

  public:
    MLMEScanRequest(const char *name=nullptr, short kind=0);
    MLMEScanRequest(const MLMEScanRequest& other);
    virtual ~MLMEScanRequest();
    MLMEScanRequest& operator=(const MLMEScanRequest& other);
    virtual MLMEScanRequest *dup() const override {return new MLMEScanRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual scanType_t getScanType() const;
    virtual void setScanType(scanType_t scanType);

    virtual uint8_t getScanChannels() const;
    virtual void setScanChannels(uint8_t scanChannels);

    virtual int getScanDuration() const;
    virtual void setScanDuration(int scanDuration);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);

    virtual bool getColorScan() const;
    virtual void setColorScan(bool colorScan);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEScanRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEScanRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:174</tt> by opp_msgtool.
 * <pre>
 * message MLMEScanConfirm
 * {
 *     macStatus_t status;
 *     int scanType;
 *     uint8_t unscannedChannels;
 *     uint16_t resultListSize;
 *     uint8_t OWPANDescriptorList[];
 * }
 * </pre>
 */
class MLMEScanConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);
    int scanType = 0;
    uint8_t unscannedChannels = 0;
    uint16_t resultListSize = 0;
    uint8_t *OWPANDescriptorList = nullptr;
    size_t OWPANDescriptorList_arraysize = 0;

  private:
    void copy(const MLMEScanConfirm& other);

  protected:
    bool operator==(const MLMEScanConfirm&) = delete;

  public:
    MLMEScanConfirm(const char *name=nullptr, short kind=0);
    MLMEScanConfirm(const MLMEScanConfirm& other);
    virtual ~MLMEScanConfirm();
    MLMEScanConfirm& operator=(const MLMEScanConfirm& other);
    virtual MLMEScanConfirm *dup() const override {return new MLMEScanConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);

    virtual int getScanType() const;
    virtual void setScanType(int scanType);

    virtual uint8_t getUnscannedChannels() const;
    virtual void setUnscannedChannels(uint8_t unscannedChannels);

    virtual uint16_t getResultListSize() const;
    virtual void setResultListSize(uint16_t resultListSize);

    virtual void setOWPANDescriptorListArraySize(size_t size);
    virtual size_t getOWPANDescriptorListArraySize() const;
    virtual uint8_t getOWPANDescriptorList(size_t k) const;
    virtual void setOWPANDescriptorList(size_t k, uint8_t OWPANDescriptorList);
    virtual void insertOWPANDescriptorList(size_t k, uint8_t OWPANDescriptorList);
    [[deprecated]] void insertOWPANDescriptorList(uint8_t OWPANDescriptorList) {appendOWPANDescriptorList(OWPANDescriptorList);}
    virtual void appendOWPANDescriptorList(uint8_t OWPANDescriptorList);
    virtual void eraseOWPANDescriptorList(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEScanConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEScanConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:184</tt> by opp_msgtool.
 * <pre>
 * message MLMESetRequest
 * {
 *     PIBAttribute_t PIBAttribute;
 *     uint8_t PIBAttributeIndex;
 *     uint64_t PIBAttributeValue;
 * }
 * </pre>
 */
class MLMESetRequest : public ::omnetpp::cMessage
{
  protected:
    PIBAttribute_t PIBAttribute = static_cast<PIBAttribute_t>(-1);
    uint8_t PIBAttributeIndex = 0;
    uint64_t PIBAttributeValue = 0;

  private:
    void copy(const MLMESetRequest& other);

  protected:
    bool operator==(const MLMESetRequest&) = delete;

  public:
    MLMESetRequest(const char *name=nullptr, short kind=0);
    MLMESetRequest(const MLMESetRequest& other);
    virtual ~MLMESetRequest();
    MLMESetRequest& operator=(const MLMESetRequest& other);
    virtual MLMESetRequest *dup() const override {return new MLMESetRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual PIBAttribute_t getPIBAttribute() const;
    virtual void setPIBAttribute(PIBAttribute_t PIBAttribute);

    virtual uint8_t getPIBAttributeIndex() const;
    virtual void setPIBAttributeIndex(uint8_t PIBAttributeIndex);

    virtual uint64_t getPIBAttributeValue() const;
    virtual void setPIBAttributeValue(uint64_t PIBAttributeValue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMESetRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMESetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:190</tt> by opp_msgtool.
 * <pre>
 * message MLMESetConfirm
 * {
 *     macStatus_t status;
 *     PIBAttribute_t PIBAttribute;
 *     uint8_t PIBAttributeIndex;
 * }
 * </pre>
 */
class MLMESetConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);
    PIBAttribute_t PIBAttribute = static_cast<PIBAttribute_t>(-1);
    uint8_t PIBAttributeIndex = 0;

  private:
    void copy(const MLMESetConfirm& other);

  protected:
    bool operator==(const MLMESetConfirm&) = delete;

  public:
    MLMESetConfirm(const char *name=nullptr, short kind=0);
    MLMESetConfirm(const MLMESetConfirm& other);
    virtual ~MLMESetConfirm();
    MLMESetConfirm& operator=(const MLMESetConfirm& other);
    virtual MLMESetConfirm *dup() const override {return new MLMESetConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);

    virtual PIBAttribute_t getPIBAttribute() const;
    virtual void setPIBAttribute(PIBAttribute_t PIBAttribute);

    virtual uint8_t getPIBAttributeIndex() const;
    virtual void setPIBAttributeIndex(uint8_t PIBAttributeIndex);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMESetConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMESetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:198</tt> by opp_msgtool.
 * <pre>
 * message MLMEStartRequest
 * {
 *     int OWPANId;
 *     int logicalChannel;
 *     int startTime;
 *     int beaconOrder;
 *     int superframeOrder;
 *     bool OWPANCoordinator;
 *     bool coordRealignment;
 *     int coordRealingmentSecurityLevel;
 *     int beaconSecurityLevel;
 * }
 * </pre>
 */
class MLMEStartRequest : public ::omnetpp::cMessage
{
  protected:
    int OWPANId = 0;
    int logicalChannel = 0;
    int startTime = 0;
    int beaconOrder = 0;
    int superframeOrder = 0;
    bool OWPANCoordinator = false;
    bool coordRealignment = false;
    int coordRealingmentSecurityLevel = 0;
    int beaconSecurityLevel = 0;

  private:
    void copy(const MLMEStartRequest& other);

  protected:
    bool operator==(const MLMEStartRequest&) = delete;

  public:
    MLMEStartRequest(const char *name=nullptr, short kind=0);
    MLMEStartRequest(const MLMEStartRequest& other);
    virtual ~MLMEStartRequest();
    MLMEStartRequest& operator=(const MLMEStartRequest& other);
    virtual MLMEStartRequest *dup() const override {return new MLMEStartRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOWPANId() const;
    virtual void setOWPANId(int OWPANId);

    virtual int getLogicalChannel() const;
    virtual void setLogicalChannel(int logicalChannel);

    virtual int getStartTime() const;
    virtual void setStartTime(int startTime);

    virtual int getBeaconOrder() const;
    virtual void setBeaconOrder(int beaconOrder);

    virtual int getSuperframeOrder() const;
    virtual void setSuperframeOrder(int superframeOrder);

    virtual bool getOWPANCoordinator() const;
    virtual void setOWPANCoordinator(bool OWPANCoordinator);

    virtual bool getCoordRealignment() const;
    virtual void setCoordRealignment(bool coordRealignment);

    virtual int getCoordRealingmentSecurityLevel() const;
    virtual void setCoordRealingmentSecurityLevel(int coordRealingmentSecurityLevel);

    virtual int getBeaconSecurityLevel() const;
    virtual void setBeaconSecurityLevel(int beaconSecurityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEStartRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEStartRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:210</tt> by opp_msgtool.
 * <pre>
 * message MLMEStartConfirm
 * {
 *     macStatus_t status;
 * }
 * </pre>
 */
class MLMEStartConfirm : public ::omnetpp::cMessage
{
  protected:
    macStatus_t status = static_cast<macStatus_t>(-1);

  private:
    void copy(const MLMEStartConfirm& other);

  protected:
    bool operator==(const MLMEStartConfirm&) = delete;

  public:
    MLMEStartConfirm(const char *name=nullptr, short kind=0);
    MLMEStartConfirm(const MLMEStartConfirm& other);
    virtual ~MLMEStartConfirm();
    MLMEStartConfirm& operator=(const MLMEStartConfirm& other);
    virtual MLMEStartConfirm *dup() const override {return new MLMEStartConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual macStatus_t getStatus() const;
    virtual void setStatus(macStatus_t status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMEStartConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMEStartConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:216</tt> by opp_msgtool.
 * <pre>
 * message MLMESyncRequest
 * {
 *     int logicalChannel;
 *     bool trackBeacon;
 * }
 * </pre>
 */
class MLMESyncRequest : public ::omnetpp::cMessage
{
  protected:
    int logicalChannel = 0;
    bool trackBeacon = false;

  private:
    void copy(const MLMESyncRequest& other);

  protected:
    bool operator==(const MLMESyncRequest&) = delete;

  public:
    MLMESyncRequest(const char *name=nullptr, short kind=0);
    MLMESyncRequest(const MLMESyncRequest& other);
    virtual ~MLMESyncRequest();
    MLMESyncRequest& operator=(const MLMESyncRequest& other);
    virtual MLMESyncRequest *dup() const override {return new MLMESyncRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getLogicalChannel() const;
    virtual void setLogicalChannel(int logicalChannel);

    virtual bool getTrackBeacon() const;
    virtual void setTrackBeacon(bool trackBeacon);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMESyncRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMESyncRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mlme.msg:223</tt> by opp_msgtool.
 * <pre>
 * message MLMESyncLossIndication
 * {
 *     uint8_t lossReason;
 *     int OWPANId;
 *     int logicalChannel;
 *     int securityLevel;
 * }
 * </pre>
 */
class MLMESyncLossIndication : public ::omnetpp::cMessage
{
  protected:
    uint8_t lossReason = 0;
    int OWPANId = 0;
    int logicalChannel = 0;
    int securityLevel = 0;

  private:
    void copy(const MLMESyncLossIndication& other);

  protected:
    bool operator==(const MLMESyncLossIndication&) = delete;

  public:
    MLMESyncLossIndication(const char *name=nullptr, short kind=0);
    MLMESyncLossIndication(const MLMESyncLossIndication& other);
    virtual ~MLMESyncLossIndication();
    MLMESyncLossIndication& operator=(const MLMESyncLossIndication& other);
    virtual MLMESyncLossIndication *dup() const override {return new MLMESyncLossIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getLossReason() const;
    virtual void setLossReason(uint8_t lossReason);

    virtual int getOWPANId() const;
    virtual void setOWPANId(int OWPANId);

    virtual int getLogicalChannel() const;
    virtual void setLogicalChannel(int logicalChannel);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MLMESyncLossIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MLMESyncLossIndication& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MLMEAssociateRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEAssociateRequest*>(ptr.get<cObject>()); }
template<> inline MLMEAssociateConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEAssociateConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEAssociateResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEAssociateResponse*>(ptr.get<cObject>()); }
template<> inline MLMEAssociateIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEAssociateIndication*>(ptr.get<cObject>()); }
template<> inline MLMEBeaconNotifyIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEBeaconNotifyIndication*>(ptr.get<cObject>()); }
template<> inline MLMECommStatusIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMECommStatusIndication*>(ptr.get<cObject>()); }
template<> inline MLMEDisassociateRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEDisassociateRequest*>(ptr.get<cObject>()); }
template<> inline MLMEDisassociateConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEDisassociateConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEDisassociateIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEDisassociateIndication*>(ptr.get<cObject>()); }
template<> inline MLMEGetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEGetRequest*>(ptr.get<cObject>()); }
template<> inline MLMEGetConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEGetConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEGTSRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEGTSRequest*>(ptr.get<cObject>()); }
template<> inline MLMEGTSConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEGTSConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEGTSIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEGTSIndication*>(ptr.get<cObject>()); }
template<> inline MLMEPollRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEPollRequest*>(ptr.get<cObject>()); }
template<> inline MLMEPollConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEPollConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEResetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEResetRequest*>(ptr.get<cObject>()); }
template<> inline MLMEResetConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEResetConfirm*>(ptr.get<cObject>()); }
template<> inline MLMERxEnableRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMERxEnableRequest*>(ptr.get<cObject>()); }
template<> inline MLMERxEnableConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMERxEnableConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEScanRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEScanRequest*>(ptr.get<cObject>()); }
template<> inline MLMEScanConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEScanConfirm*>(ptr.get<cObject>()); }
template<> inline MLMESetRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMESetRequest*>(ptr.get<cObject>()); }
template<> inline MLMESetConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMESetConfirm*>(ptr.get<cObject>()); }
template<> inline MLMEStartRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEStartRequest*>(ptr.get<cObject>()); }
template<> inline MLMEStartConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMEStartConfirm*>(ptr.get<cObject>()); }
template<> inline MLMESyncRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMESyncRequest*>(ptr.get<cObject>()); }
template<> inline MLMESyncLossIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MLMESyncLossIndication*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MLME_M_H

