//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgs/mac_msgs/mcps.msg.
//

#ifndef __MCPS_M_H
#define __MCPS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MCPSDataRequest;
class MCPSDataConfirm;
class MCPSDataIndication;
#include "types_m.h" // import types

/**
 * Class generated from <tt>msgs/mac_msgs/mcps.msg:18</tt> by opp_msgtool.
 * <pre>
 * message MCPSDataRequest
 * {
 *     addressingMode_t srcAddrMode;
 *     int dstAddrMode;
 *     int dstOWPANId;
 *     uint64_t dstAddr;
 *     int msduLength;
 *     uint8_t msdu[];
 *     int msduHandle;
 *     uint8_t txOptions;
 *     int securityLevel;
 *     uint8_t dataRate;
 *     bool burstMode;
 *     bool colorReceived;
 *     bool colorNotReceived;
 * }
 * </pre>
 */
class MCPSDataRequest : public ::omnetpp::cMessage
{
  protected:
    addressingMode_t srcAddrMode = static_cast<addressingMode_t>(-1);
    int dstAddrMode = 0;
    int dstOWPANId = 0;
    uint64_t dstAddr = 0;
    int msduLength = 0;
    uint8_t *msdu = nullptr;
    size_t msdu_arraysize = 0;
    int msduHandle = 0;
    uint8_t txOptions = 0;
    int securityLevel = 0;
    uint8_t dataRate = 0;
    bool burstMode = false;
    bool colorReceived = false;
    bool colorNotReceived = false;

  private:
    void copy(const MCPSDataRequest& other);

  protected:
    bool operator==(const MCPSDataRequest&) = delete;

  public:
    MCPSDataRequest(const char *name=nullptr, short kind=0);
    MCPSDataRequest(const MCPSDataRequest& other);
    virtual ~MCPSDataRequest();
    MCPSDataRequest& operator=(const MCPSDataRequest& other);
    virtual MCPSDataRequest *dup() const override {return new MCPSDataRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual addressingMode_t getSrcAddrMode() const;
    virtual void setSrcAddrMode(addressingMode_t srcAddrMode);

    virtual int getDstAddrMode() const;
    virtual void setDstAddrMode(int dstAddrMode);

    virtual int getDstOWPANId() const;
    virtual void setDstOWPANId(int dstOWPANId);

    virtual uint64_t getDstAddr() const;
    virtual void setDstAddr(uint64_t dstAddr);

    virtual int getMsduLength() const;
    virtual void setMsduLength(int msduLength);

    virtual void setMsduArraySize(size_t size);
    virtual size_t getMsduArraySize() const;
    virtual uint8_t getMsdu(size_t k) const;
    virtual void setMsdu(size_t k, uint8_t msdu);
    virtual void insertMsdu(size_t k, uint8_t msdu);
    [[deprecated]] void insertMsdu(uint8_t msdu) {appendMsdu(msdu);}
    virtual void appendMsdu(uint8_t msdu);
    virtual void eraseMsdu(size_t k);

    virtual int getMsduHandle() const;
    virtual void setMsduHandle(int msduHandle);

    virtual uint8_t getTxOptions() const;
    virtual void setTxOptions(uint8_t txOptions);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);

    virtual uint8_t getDataRate() const;
    virtual void setDataRate(uint8_t dataRate);

    virtual bool getBurstMode() const;
    virtual void setBurstMode(bool burstMode);

    virtual bool getColorReceived() const;
    virtual void setColorReceived(bool colorReceived);

    virtual bool getColorNotReceived() const;
    virtual void setColorNotReceived(bool colorNotReceived);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MCPSDataRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MCPSDataRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mac_msgs/mcps.msg:34</tt> by opp_msgtool.
 * <pre>
 * message MCPSDataConfirm
 * {
 *     int msduHandle;
 *     uint8_t status;
 *     int timestamp;
 * }
 * </pre>
 */
class MCPSDataConfirm : public ::omnetpp::cMessage
{
  protected:
    int msduHandle = 0;
    uint8_t status = 0;
    int timestamp = 0;

  private:
    void copy(const MCPSDataConfirm& other);

  protected:
    bool operator==(const MCPSDataConfirm&) = delete;

  public:
    MCPSDataConfirm(const char *name=nullptr, short kind=0);
    MCPSDataConfirm(const MCPSDataConfirm& other);
    virtual ~MCPSDataConfirm();
    MCPSDataConfirm& operator=(const MCPSDataConfirm& other);
    virtual MCPSDataConfirm *dup() const override {return new MCPSDataConfirm(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMsduHandle() const;
    virtual void setMsduHandle(int msduHandle);

    virtual uint8_t getStatus() const;
    virtual void setStatus(uint8_t status);

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MCPSDataConfirm& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MCPSDataConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgs/mac_msgs/mcps.msg:40</tt> by opp_msgtool.
 * <pre>
 * message MCPSDataIndication
 * {
 *     int srcAddrMode;
 *     int srcOWPANId;
 *     uint64_t srcAddr;
 *     int dstAddrMode;
 *     int dstOWPANId;
 *     uint64_t dstAddr;
 *     int msduLength;
 *     uint8_t msdu[];
 *     int mpduLinkQuality;
 *     int DSN;
 *     int timestamp;
 *     int securityLevel;
 *     uint8_t dataRate;
 *     bool burstMode;
 *     bool colorReceived;
 *     bool colorNotReceived;
 * }
 * </pre>
 */
class MCPSDataIndication : public ::omnetpp::cMessage
{
  protected:
    int srcAddrMode = 0;
    int srcOWPANId = 0;
    uint64_t srcAddr = 0;
    int dstAddrMode = 0;
    int dstOWPANId = 0;
    uint64_t dstAddr = 0;
    int msduLength = 0;
    uint8_t *msdu = nullptr;
    size_t msdu_arraysize = 0;
    int mpduLinkQuality = 0;
    int DSN = 0;
    int timestamp = 0;
    int securityLevel = 0;
    uint8_t dataRate = 0;
    bool burstMode = false;
    bool colorReceived = false;
    bool colorNotReceived = false;

  private:
    void copy(const MCPSDataIndication& other);

  protected:
    bool operator==(const MCPSDataIndication&) = delete;

  public:
    MCPSDataIndication(const char *name=nullptr, short kind=0);
    MCPSDataIndication(const MCPSDataIndication& other);
    virtual ~MCPSDataIndication();
    MCPSDataIndication& operator=(const MCPSDataIndication& other);
    virtual MCPSDataIndication *dup() const override {return new MCPSDataIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcAddrMode() const;
    virtual void setSrcAddrMode(int srcAddrMode);

    virtual int getSrcOWPANId() const;
    virtual void setSrcOWPANId(int srcOWPANId);

    virtual uint64_t getSrcAddr() const;
    virtual void setSrcAddr(uint64_t srcAddr);

    virtual int getDstAddrMode() const;
    virtual void setDstAddrMode(int dstAddrMode);

    virtual int getDstOWPANId() const;
    virtual void setDstOWPANId(int dstOWPANId);

    virtual uint64_t getDstAddr() const;
    virtual void setDstAddr(uint64_t dstAddr);

    virtual int getMsduLength() const;
    virtual void setMsduLength(int msduLength);

    virtual void setMsduArraySize(size_t size);
    virtual size_t getMsduArraySize() const;
    virtual uint8_t getMsdu(size_t k) const;
    virtual void setMsdu(size_t k, uint8_t msdu);
    virtual void insertMsdu(size_t k, uint8_t msdu);
    [[deprecated]] void insertMsdu(uint8_t msdu) {appendMsdu(msdu);}
    virtual void appendMsdu(uint8_t msdu);
    virtual void eraseMsdu(size_t k);

    virtual int getMpduLinkQuality() const;
    virtual void setMpduLinkQuality(int mpduLinkQuality);

    virtual int getDSN() const;
    virtual void setDSN(int DSN);

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);

    virtual int getSecurityLevel() const;
    virtual void setSecurityLevel(int securityLevel);

    virtual uint8_t getDataRate() const;
    virtual void setDataRate(uint8_t dataRate);

    virtual bool getBurstMode() const;
    virtual void setBurstMode(bool burstMode);

    virtual bool getColorReceived() const;
    virtual void setColorReceived(bool colorReceived);

    virtual bool getColorNotReceived() const;
    virtual void setColorNotReceived(bool colorNotReceived);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MCPSDataIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MCPSDataIndication& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MCPSDataRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<MCPSDataRequest*>(ptr.get<cObject>()); }
template<> inline MCPSDataConfirm *fromAnyPtr(any_ptr ptr) { return check_and_cast<MCPSDataConfirm*>(ptr.get<cObject>()); }
template<> inline MCPSDataIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<MCPSDataIndication*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MCPS_M_H

