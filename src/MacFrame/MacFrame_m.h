//
// Generated file, do not edit! Created by opp_msgtool 6.0 from MacFrame/MacFrame.msg.
//

#ifndef __MACFRAME_M_H
#define __MACFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MacFrame;
/**
 * Class generated from <tt>MacFrame/MacFrame.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet MacFrame
 * {
 *     \@customize(true);
 *     uint16_t frameControl;
 *     uint8_t sequenceNumber;
 *     uint16_t destinationOWPANId[];
 *     uint16_t destinationAddress[];
 *     uint16_t sourceOWPANId[];
 *     uint16_t sourceAddress[];
 *     uint8_t auxiliarySecurityHeader[];
 *     uint8_t payload[];
 *     uint16_t fcs;
 * }
 * </pre>
 *
 * MacFrame_Base is only useful if it gets subclassed, and MacFrame is derived from it.
 * The minimum code to be written for MacFrame is the following:
 *
 * <pre>
 * class MacFrame : public MacFrame_Base
 * {
 *   private:
 *     void copy(const MacFrame& other) { ... }

 *   public:
 *     MacFrame(const char *name=nullptr, short kind=0) : MacFrame_Base(name,kind) {}
 *     MacFrame(const MacFrame& other) : MacFrame_Base(other) {copy(other);}
 *     MacFrame& operator=(const MacFrame& other) {if (this==&other) return *this; MacFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual MacFrame *dup() const override {return new MacFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from MacFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(MacFrame)
 * </pre>
 */
class MacFrame_Base : public ::omnetpp::cPacket
{
  protected:
    uint16_t frameControl = 0;
    uint8_t sequenceNumber = 0;
    uint16_t *destinationOWPANId = nullptr;
    size_t destinationOWPANId_arraysize = 0;
    uint16_t *destinationAddress = nullptr;
    size_t destinationAddress_arraysize = 0;
    uint16_t *sourceOWPANId = nullptr;
    size_t sourceOWPANId_arraysize = 0;
    uint16_t *sourceAddress = nullptr;
    size_t sourceAddress_arraysize = 0;
    uint8_t *auxiliarySecurityHeader = nullptr;
    size_t auxiliarySecurityHeader_arraysize = 0;
    uint8_t *payload = nullptr;
    size_t payload_arraysize = 0;
    uint16_t fcs = 0;

  private:
    void copy(const MacFrame_Base& other);

  protected:
    bool operator==(const MacFrame_Base&) = delete;
    // make constructors protected to avoid instantiation
    MacFrame_Base(const char *name=nullptr, short kind=0);
    MacFrame_Base(const MacFrame_Base& other);
    // make assignment operator protected to force the user override it
    MacFrame_Base& operator=(const MacFrame_Base& other);

  public:
    virtual ~MacFrame_Base();
    virtual MacFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class MacFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getFrameControl() const;
    virtual void setFrameControl(uint16_t frameControl);

    virtual uint8_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint8_t sequenceNumber);

    virtual void setDestinationOWPANIdArraySize(size_t size);
    virtual size_t getDestinationOWPANIdArraySize() const;
    virtual uint16_t getDestinationOWPANId(size_t k) const;
    virtual void setDestinationOWPANId(size_t k, uint16_t destinationOWPANId);
    virtual void insertDestinationOWPANId(size_t k, uint16_t destinationOWPANId);
    [[deprecated]] void insertDestinationOWPANId(uint16_t destinationOWPANId) {appendDestinationOWPANId(destinationOWPANId);}
    virtual void appendDestinationOWPANId(uint16_t destinationOWPANId);
    virtual void eraseDestinationOWPANId(size_t k);

    virtual void setDestinationAddressArraySize(size_t size);
    virtual size_t getDestinationAddressArraySize() const;
    virtual uint16_t getDestinationAddress(size_t k) const;
    virtual void setDestinationAddress(size_t k, uint16_t destinationAddress);
    virtual void insertDestinationAddress(size_t k, uint16_t destinationAddress);
    [[deprecated]] void insertDestinationAddress(uint16_t destinationAddress) {appendDestinationAddress(destinationAddress);}
    virtual void appendDestinationAddress(uint16_t destinationAddress);
    virtual void eraseDestinationAddress(size_t k);

    virtual void setSourceOWPANIdArraySize(size_t size);
    virtual size_t getSourceOWPANIdArraySize() const;
    virtual uint16_t getSourceOWPANId(size_t k) const;
    virtual void setSourceOWPANId(size_t k, uint16_t sourceOWPANId);
    virtual void insertSourceOWPANId(size_t k, uint16_t sourceOWPANId);
    [[deprecated]] void insertSourceOWPANId(uint16_t sourceOWPANId) {appendSourceOWPANId(sourceOWPANId);}
    virtual void appendSourceOWPANId(uint16_t sourceOWPANId);
    virtual void eraseSourceOWPANId(size_t k);

    virtual void setSourceAddressArraySize(size_t size);
    virtual size_t getSourceAddressArraySize() const;
    virtual uint16_t getSourceAddress(size_t k) const;
    virtual void setSourceAddress(size_t k, uint16_t sourceAddress);
    virtual void insertSourceAddress(size_t k, uint16_t sourceAddress);
    [[deprecated]] void insertSourceAddress(uint16_t sourceAddress) {appendSourceAddress(sourceAddress);}
    virtual void appendSourceAddress(uint16_t sourceAddress);
    virtual void eraseSourceAddress(size_t k);

    virtual void setAuxiliarySecurityHeaderArraySize(size_t size);
    virtual size_t getAuxiliarySecurityHeaderArraySize() const;
    virtual uint8_t getAuxiliarySecurityHeader(size_t k) const;
    virtual void setAuxiliarySecurityHeader(size_t k, uint8_t auxiliarySecurityHeader);
    virtual void insertAuxiliarySecurityHeader(size_t k, uint8_t auxiliarySecurityHeader);
    [[deprecated]] void insertAuxiliarySecurityHeader(uint8_t auxiliarySecurityHeader) {appendAuxiliarySecurityHeader(auxiliarySecurityHeader);}
    virtual void appendAuxiliarySecurityHeader(uint8_t auxiliarySecurityHeader);
    virtual void eraseAuxiliarySecurityHeader(size_t k);

    virtual void setPayloadArraySize(size_t size);
    virtual size_t getPayloadArraySize() const;
    virtual uint8_t getPayload(size_t k) const;
    virtual void setPayload(size_t k, uint8_t payload);
    virtual void insertPayload(size_t k, uint8_t payload);
    [[deprecated]] void insertPayload(uint8_t payload) {appendPayload(payload);}
    virtual void appendPayload(uint8_t payload);
    virtual void erasePayload(size_t k);

    virtual uint16_t getFcs() const;
    virtual void setFcs(uint16_t fcs);
};


namespace omnetpp {

template<> inline MacFrame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<MacFrame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MACFRAME_M_H

